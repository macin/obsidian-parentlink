/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ParentLink
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enabled: true,
  detailedLogs: false,
  allowedPaths: []
  // Default to empty array (all paths allowed)
};
var ParentLink = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEvents();
    this.addSettingTab(new ParentLinkSettingTab(this.app, this));
  }
  registerEvents() {
    this.registerEvent(
      this.app.vault.on("create", async (file) => {
        if (file instanceof import_obsidian.TFile && this.settings.enabled) {
          await this.updateParentLink(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", async (file, oldPath) => {
        var _a, _b;
        if (!this.settings.enabled)
          return;
        if (file instanceof import_obsidian.TFile) {
          await this.updateParentLink(file);
          const isFolderNote = file.basename === ((_a = file.parent) == null ? void 0 : _a.name);
          if (isFolderNote) {
            if (this.settings.detailedLogs) {
              console.log(`Folder note renamed, updating child notes in ${(_b = file.parent) == null ? void 0 : _b.path}`);
            }
            const childFiles = this.app.vault.getMarkdownFiles().filter((f) => {
              var _a2, _b2;
              return ((_a2 = f.parent) == null ? void 0 : _a2.path) === ((_b2 = file.parent) == null ? void 0 : _b2.path) && f !== file;
            });
            for (const childFile of childFiles) {
              if (this.settings.detailedLogs) {
                console.log(`Updating child note: ${childFile.path}`);
              }
              await this.updateParentLink(childFile);
            }
          }
        } else if (file instanceof import_obsidian.TFolder) {
          await this.handleFolderRename(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", async (file) => {
        var _a;
        if (!this.settings.enabled || !(file instanceof import_obsidian.TFile))
          return;
        const cache = this.app.metadataCache.getFileCache(file);
        const frontmatter = cache == null ? void 0 : cache.frontmatter;
        const isFolderNote = file.basename === ((_a = file.parent) == null ? void 0 : _a.name);
        if (isFolderNote && (!(frontmatter == null ? void 0 : frontmatter.parent) || frontmatter.parent === "")) {
          if (this.settings.detailedLogs) {
            console.log(`Folder note modified externally: ${file.path}, updating children`);
          }
          await this.handleFolderRename(file.parent);
        }
      })
    );
  }
  async processAllFiles() {
    if (this.settings.detailedLogs) {
      console.log("Starting to process all files...");
      const files2 = this.app.vault.getMarkdownFiles();
      console.log(`Found ${files2.length} markdown files`);
    }
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      if (this.settings.detailedLogs) {
        console.log(`Processing file: ${file.path}`);
      }
      await this.updateParentLink(file);
    }
    new import_obsidian.Notice("ParentLink: Finished processing all files");
  }
  async updateParentLink(file) {
    var _a, _b;
    try {
      if (this.settings.allowedPaths.length > 0) {
        const isAllowed = this.settings.allowedPaths.some(
          (allowedPath) => {
            var _a2;
            return file.path.startsWith(allowedPath) || // Also check parent folder for folder notes
            (((_a2 = file.parent) == null ? void 0 : _a2.path) || "").startsWith(allowedPath);
          }
        );
        if (!isAllowed) {
          if (this.settings.detailedLogs) {
            console.log(`${file.path} - skipped (not in allowed paths)`);
          }
          return;
        }
      }
      const parentFolder = file.parent;
      if (!parentFolder) {
        if (this.settings.detailedLogs) {
          console.log(`${file.path} - skipped (no parent folder)`);
        }
        return;
      }
      let parentNote = null;
      const isFolderNote = file.basename === parentFolder.name;
      if (file.basename.toLowerCase() === parentFolder.name.toLowerCase() && !isFolderNote) {
        if (this.settings.detailedLogs) {
          console.log(`${file.path} - skipped (folder note name case doesn't match folder name)`);
        }
        return;
      }
      if (isFolderNote) {
        const grandparentFolder = parentFolder.parent;
        if (grandparentFolder) {
          parentNote = this.app.vault.getMarkdownFiles().find(
            (f) => {
              var _a2;
              return f.basename === grandparentFolder.name && ((_a2 = f.parent) == null ? void 0 : _a2.path) === grandparentFolder.path && f !== file;
            }
          );
        }
      } else {
        parentNote = this.app.vault.getMarkdownFiles().find(
          (f) => {
            var _a2;
            return f.basename === parentFolder.name && ((_a2 = f.parent) == null ? void 0 : _a2.path) === parentFolder.path && f !== file;
          }
        );
      }
      if (!parentNote) {
        const targetFolder = isFolderNote ? (_a = parentFolder.parent) == null ? void 0 : _a.name : parentFolder.name;
        if (this.settings.detailedLogs) {
          console.log(`${file.path} - skipped (no matching parent note for folder ${targetFolder})`);
        }
        return;
      }
      const cache = this.app.metadataCache.getFileCache(file);
      const currentParent = (_b = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _b.parent;
      const newParent = "[[" + parentNote.name.replace(".md", "") + "]]";
      if (currentParent !== newParent) {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          frontmatter.parent = newParent;
          if (this.settings.detailedLogs) {
            console.log(`${file.path} - frontmatter updated with parent: ${newParent}`);
          }
        });
      } else if (this.settings.detailedLogs) {
        console.log(`${file.path} - skipped (parent already set correctly)`);
      }
    } catch (error) {
      console.error(`${file.path} - error updating parent link:`, error);
      new import_obsidian.Notice(`Error updating parent link for ${file.path}`);
    }
  }
  onunload() {
    if (this.settings.detailedLogs) {
      console.log("unloading plugin");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async handleFolderRename(folder) {
    if (this.settings.detailedLogs) {
      console.log(`Folder renamed/modified: ${folder.path}, updating all files inside`);
    }
    const filesInFolder = this.app.vault.getMarkdownFiles().filter((f) => {
      if (folder.isRoot()) {
        return true;
      }
      return f.path.startsWith(folder.path + "/");
    });
    for (const childFile of filesInFolder) {
      await this.updateParentLink(childFile);
    }
    if (!folder.isRoot()) {
      const folderNote = this.app.vault.getMarkdownFiles().find((f) => {
        var _a;
        return f.basename === folder.name && ((_a = f.parent) == null ? void 0 : _a.path) === folder.path;
      });
      if (folderNote) {
        if (this.settings.detailedLogs) {
          console.log(`Updating folder note: ${folderNote.path}`);
        }
        await this.updateParentLink(folderNote);
      }
    }
  }
};
var ParentLinkSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Parent Link Settings" });
    this.addBasicSettings(containerEl);
    this.addFolderRefreshSetting(containerEl);
    containerEl.createEl("h3", { text: "Allowed Paths" });
    containerEl.createEl("p", {
      text: "Specify paths where the plugin should work. Leave empty to allow all paths.",
      cls: "setting-item-description"
    });
    this.allowedPathsContainer = containerEl.createDiv({ cls: "parent-link-allowed-paths" });
    const addButton = new import_obsidian.Setting(containerEl).addButton((button) => button.setButtonText("Add Path").setClass("mod-setting-button").onClick(() => {
      this.addAllowedPathInput();
    }));
    if (this.plugin.settings.allowedPaths.length === 0) {
      this.addAllowedPathInput();
    } else {
      this.plugin.settings.allowedPaths.forEach((path) => {
        this.addAllowedPathInput(path);
      });
    }
    containerEl.createEl("style", {
      text: `
        .parent-link-input-container {
          position: relative;
          flex: 1;
        }
        .parent-link-input-container input {
          width: 100%;
          padding: 6px 12px;
          height: var(--input-height);
          background: var(--background-modifier-form-field);
          border: var(--input-border-width) solid var(--background-modifier-border);
          color: var(--text-normal);
          border-radius: var(--radius-s);
          font-size: var(--font-ui-small);
        }
        .parent-link-suggestion-container {
          position: absolute;
          width: 100%;
          max-height: 200px;
          overflow-y: auto;
          background: var(--background-primary);
          border: 1px solid var(--background-modifier-border);
          z-index: 100;
          border-radius: var(--radius-s);
          box-shadow: var(--shadow-s);
          margin-top: 4px;
        }
        .parent-link-suggestion {
          padding: 8px 12px;
          cursor: pointer;
          font-size: var(--font-ui-small);
        }
        .parent-link-suggestion:hover,
        .parent-link-suggestion.is-selected {
          background: var(--background-modifier-hover);
          color: var(--text-accent);
        }
        .parent-link-allowed-path {
          display: flex;
          align-items: center;
          gap: 8px;
          margin-bottom: 8px;
          width: 100%;
          padding: 0 20px;
        }
        .parent-link-remove-button {
          padding: 0;
          background: var(--background-modifier-error);
          border: none;
          color: var(--text-on-accent);
          border-radius: var(--radius-s);
          cursor: pointer;
          height: var(--input-height);
          width: var(--input-height);
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 18px;
        }
        .parent-link-remove-button:hover {
          background: var(--background-modifier-error-hover);
        }
        .parent-link-allowed-paths {
          width: 100%;
          margin-bottom: 12px;
        }
        .setting-item.mod-setting-button {
          padding-left: 20px;
          padding-right: 20px;
        }
      `
    });
  }
  addBasicSettings(containerEl) {
    new import_obsidian.Setting(containerEl).setName("Enable automatic parent linking").setDesc("Automatically add parent links to files when they are created or moved").addToggle((toggle) => toggle.setValue(this.plugin.settings.enabled).onChange(async (value) => {
      this.plugin.settings.enabled = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Enable detailed logs").setDesc("Show additional processing details in the console").addToggle((toggle) => toggle.setValue(this.plugin.settings.detailedLogs).onChange(async (value) => {
      this.plugin.settings.detailedLogs = value;
      await this.plugin.saveSettings();
    }));
  }
  addAllowedPathInput(initialValue = "") {
    const container = this.allowedPathsContainer.createDiv({ cls: "parent-link-allowed-path" });
    const inputContainer = container.createDiv({ cls: "parent-link-input-container" });
    const input = inputContainer.createEl("input", {
      type: "text",
      value: initialValue,
      placeholder: "Type folder path..."
    });
    const suggestionContainer = inputContainer.createDiv({
      cls: "parent-link-suggestion-container"
    });
    suggestionContainer.style.display = "none";
    const removeButton = container.createEl("button", {
      text: "\xD7",
      title: "Remove path",
      cls: "parent-link-remove-button"
    });
    removeButton.onclick = () => {
      container.remove();
      this.saveAllowedPaths();
    };
    let selectedIndex = -1;
    const handleKeydown = (event) => {
      const suggestions = suggestionContainer.children;
      if (suggestions.length === 0)
        return;
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        event.preventDefault();
        if (event.key === "ArrowDown") {
          selectedIndex = (selectedIndex + 1) % suggestions.length;
        } else {
          selectedIndex = selectedIndex <= 0 ? suggestions.length - 1 : selectedIndex - 1;
        }
        Array.from(suggestions).forEach((el, i) => {
          el.classList.toggle("is-selected", i === selectedIndex);
        });
      } else if (event.key === "Enter" && selectedIndex >= 0) {
        event.preventDefault();
        const selectedSuggestion = suggestions[selectedIndex];
        input.value = selectedSuggestion.textContent || "";
        suggestionContainer.style.display = "none";
        selectedIndex = -1;
        this.saveAllowedPaths();
      } else if (event.key === "Escape") {
        suggestionContainer.style.display = "none";
        selectedIndex = -1;
      }
    };
    input.addEventListener("input", () => {
      selectedIndex = -1;
      this.updatePathSuggestions(input, suggestionContainer);
      this.saveAllowedPaths();
    });
    input.addEventListener("focus", () => {
      this.updatePathSuggestions(input, suggestionContainer);
    });
    input.addEventListener("blur", () => {
      setTimeout(() => {
        suggestionContainer.style.display = "none";
        selectedIndex = -1;
      }, 200);
    });
    input.addEventListener("keydown", handleKeydown);
  }
  updatePathSuggestions(input, suggestionContainer) {
    const inputValue = input.value.toLowerCase();
    const folders = this.getAllFolders();
    const suggestions = folders.filter(
      (f) => f.path.toLowerCase().contains(inputValue)
    );
    suggestionContainer.empty();
    if (suggestions.length > 0 && inputValue) {
      suggestionContainer.style.display = "block";
      suggestions.forEach((folder) => {
        const suggestionEl = suggestionContainer.createDiv({
          cls: "parent-link-suggestion",
          text: folder.path
        });
        suggestionEl.onmousedown = () => {
          input.value = folder.path;
          suggestionContainer.style.display = "none";
          this.saveAllowedPaths();
        };
      });
    } else {
      suggestionContainer.style.display = "none";
    }
  }
  saveAllowedPaths() {
    const inputs = this.allowedPathsContainer.querySelectorAll("input");
    const paths = Array.from(inputs).map((input) => input.value.trim()).filter((path) => path.length > 0);
    this.plugin.settings.allowedPaths = paths;
    this.plugin.saveSettings();
  }
  getAllFolders() {
    const folders = [];
    const files = this.app.vault.getAllLoadedFiles();
    files.forEach((file) => {
      if (file instanceof import_obsidian.TFolder) {
        folders.push(file);
      }
    });
    return folders;
  }
  addFolderRefreshSetting(containerEl) {
    const folderSetting = new import_obsidian.Setting(containerEl).setName("Refresh folder parents").setDesc("Type folder path to refresh parent links for all files in that folder");
    const inputContainer = containerEl.createDiv({ cls: "parent-link-input-container" });
    this.folderInputEl = inputContainer.createEl("input", {
      type: "text",
      value: this.plugin.settings.lastRefreshedFolder || "",
      placeholder: "Type folder path..."
    });
    this.suggestionContainer = inputContainer.createDiv({
      cls: "parent-link-suggestion-container"
    });
    this.suggestionContainer.style.display = "none";
    folderSetting.addButton((button) => button.setButtonText("Refresh").onClick(async () => {
      const folderPath = this.folderInputEl.value;
      if (folderPath === "/" || folderPath === "") {
        const rootFolder = this.app.vault.getRoot();
        this.plugin.settings.lastRefreshedFolder = "/";
        await this.plugin.saveSettings();
        await this.plugin.handleFolderRename(rootFolder);
        new import_obsidian.Notice(`Updated parent links in the entire vault`);
      } else {
        const folder = this.app.vault.getAbstractFileByPath(folderPath);
        if (folder instanceof import_obsidian.TFolder) {
          this.plugin.settings.lastRefreshedFolder = folderPath;
          await this.plugin.saveSettings();
          await this.plugin.handleFolderRename(folder);
          new import_obsidian.Notice(`Updated parent links in ${folderPath}`);
        } else {
          new import_obsidian.Notice("Please enter a valid folder path");
        }
      }
    }));
    this.folderInputEl.addEventListener("input", () => {
      this.updatePathSuggestions(this.folderInputEl, this.suggestionContainer);
    });
    this.folderInputEl.addEventListener("focus", () => {
      this.updatePathSuggestions(this.folderInputEl, this.suggestionContainer);
    });
    this.folderInputEl.addEventListener("blur", () => {
      setTimeout(() => {
        this.suggestionContainer.style.display = "none";
      }, 200);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7XHJcbiAgQXBwLFxyXG4gIE1vZGFsLFxyXG4gIE5vdGljZSxcclxuICBQbHVnaW4sXHJcbiAgUGx1Z2luU2V0dGluZ1RhYixcclxuICBTZXR0aW5nLFxyXG4gIFRGaWxlLFxyXG4gIFRGb2xkZXIsXHJcbiAgTWV0YWRhdGFDYWNoZSxcclxuICBGcm9udE1hdHRlckNhY2hlLFxyXG59IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuaW50ZXJmYWNlIFBhcmVudExpbmtTZXR0aW5ncyB7XHJcbiAgZW5hYmxlZDogYm9vbGVhbjtcclxuICBkZXRhaWxlZExvZ3M6IGJvb2xlYW47XHJcbiAgbGFzdFJlZnJlc2hlZEZvbGRlcj86IHN0cmluZzsgIC8vIEFkZCB0aGlzIHRvIHN0b3JlIGxhc3QgdXNlZCBmb2xkZXJcclxuICBhbGxvd2VkUGF0aHM6IHN0cmluZ1tdOyAgLy8gQWRkIHRoaXMgZm9yIHBhdGggZmlsdGVyaW5nXHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFBhcmVudExpbmtTZXR0aW5ncyA9IHtcclxuICBlbmFibGVkOiB0cnVlLFxyXG4gIGRldGFpbGVkTG9nczogZmFsc2UsXHJcbiAgYWxsb3dlZFBhdGhzOiBbXSwgIC8vIERlZmF1bHQgdG8gZW1wdHkgYXJyYXkgKGFsbCBwYXRocyBhbGxvd2VkKVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyZW50TGluayBleHRlbmRzIFBsdWdpbiB7XHJcbiAgc2V0dGluZ3M6IFBhcmVudExpbmtTZXR0aW5ncztcclxuXHJcbiAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcbiAgICAvLyBSZWdpc3RlciBldmVudCBoYW5kbGVycyAodGhleSB3aWxsIGNoZWNrIHNldHRpbmdzLmVuYWJsZWQgaW50ZXJuYWxseSlcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcclxuXHJcbiAgICAvLyBBZGQgc2V0dGluZ3MgdGFiXHJcbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IFBhcmVudExpbmtTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlZ2lzdGVyRXZlbnRzKCkge1xyXG4gICAgLy8gTW9uaXRvciBmaWxlIGNyZWF0aW9uXHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcbiAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKFwiY3JlYXRlXCIsIGFzeW5jIChmaWxlKSA9PiB7XHJcbiAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiB0aGlzLnNldHRpbmdzLmVuYWJsZWQpIHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhmaWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIE1vbml0b3IgZmlsZSBtb3Zlcy9yZW5hbWVzXHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcbiAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKFwicmVuYW1lXCIsIGFzeW5jIChmaWxlLCBvbGRQYXRoKSA9PiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmVuYWJsZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSByZW5hbWVkIGZpbGVcclxuICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhmaWxlKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIGZvbGRlciBub3RlLCB1cGRhdGUgYWxsIG5vdGVzIGluIHRoYXQgZm9sZGVyXHJcbiAgICAgICAgICBjb25zdCBpc0ZvbGRlck5vdGUgPSBmaWxlLmJhc2VuYW1lID09PSBmaWxlLnBhcmVudD8ubmFtZTtcclxuICAgICAgICAgIGlmIChpc0ZvbGRlck5vdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZvbGRlciBub3RlIHJlbmFtZWQsIHVwZGF0aW5nIGNoaWxkIG5vdGVzIGluICR7ZmlsZS5wYXJlbnQ/LnBhdGh9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEdldCBhbGwgZmlsZXMgaW4gdGhlIGZvbGRlclxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZEZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpXHJcbiAgICAgICAgICAgICAgLmZpbHRlcihmID0+IGYucGFyZW50Py5wYXRoID09PSBmaWxlLnBhcmVudD8ucGF0aCAmJiBmICE9PSBmaWxlKTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gVXBkYXRlIGVhY2ggY2hpbGQgZmlsZVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkRmlsZSBvZiBjaGlsZEZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXBkYXRpbmcgY2hpbGQgbm90ZTogJHtjaGlsZEZpbGUucGF0aH1gKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQYXJlbnRMaW5rKGNoaWxkRmlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGZpbGUgaW5zdGFuY2VvZiBURm9sZGVyKSB7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZUZvbGRlclJlbmFtZShmaWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIE1vbml0b3IgZXh0ZXJuYWwgY2hhbmdlc1xyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxyXG4gICAgICB0aGlzLmFwcC52YXVsdC5vbihcIm1vZGlmeVwiLCBhc3luYyAoZmlsZSkgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5lbmFibGVkIHx8ICEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgZnJvbnRtYXR0ZXJcclxuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG4gICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gY2FjaGU/LmZyb250bWF0dGVyO1xyXG5cclxuICAgICAgICAvLyBPbmx5IHByb2Nlc3MgaWYgdGhpcyBpcyBhIGZvbGRlciBub3RlIGFuZCB0aGUgZnJvbnRtYXR0ZXIgZG9lc24ndCBoYXZlIGEgcGFyZW50IGZpZWxkXHJcbiAgICAgICAgLy8gb3IgaWYgdGhlIHBhcmVudCBmaWVsZCBleGlzdHMgYnV0IGlzIGVtcHR5L2ludmFsaWRcclxuICAgICAgICBjb25zdCBpc0ZvbGRlck5vdGUgPSBmaWxlLmJhc2VuYW1lID09PSBmaWxlLnBhcmVudD8ubmFtZTtcclxuICAgICAgICBpZiAoaXNGb2xkZXJOb3RlICYmICghZnJvbnRtYXR0ZXI/LnBhcmVudCB8fCBmcm9udG1hdHRlci5wYXJlbnQgPT09ICcnKSkge1xyXG4gICAgICAgICAgLy8gVXBkYXRlIGFsbCBmaWxlcyBpbiB0aGUgZm9sZGVyXHJcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYEZvbGRlciBub3RlIG1vZGlmaWVkIGV4dGVybmFsbHk6ICR7ZmlsZS5wYXRofSwgdXBkYXRpbmcgY2hpbGRyZW5gKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGF3YWl0IHRoaXMuaGFuZGxlRm9sZGVyUmVuYW1lKGZpbGUucGFyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcHJvY2Vzc0FsbEZpbGVzKCkge1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiU3RhcnRpbmcgdG8gcHJvY2VzcyBhbGwgZmlsZXMuLi5cIik7XHJcbiAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgRm91bmQgJHtmaWxlcy5sZW5ndGh9IG1hcmtkb3duIGZpbGVzYCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nIGZpbGU6ICR7ZmlsZS5wYXRofWApO1xyXG4gICAgICB9XHJcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhmaWxlKTtcclxuICAgIH1cclxuICAgIG5ldyBOb3RpY2UoXCJQYXJlbnRMaW5rOiBGaW5pc2hlZCBwcm9jZXNzaW5nIGFsbCBmaWxlc1wiKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZVBhcmVudExpbmsoZmlsZTogVEZpbGUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENoZWNrIGlmIHBhdGggaXMgYWxsb3dlZFxyXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd2VkUGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGlzQWxsb3dlZCA9IHRoaXMuc2V0dGluZ3MuYWxsb3dlZFBhdGhzLnNvbWUoYWxsb3dlZFBhdGggPT4gXHJcbiAgICAgICAgICBmaWxlLnBhdGguc3RhcnRzV2l0aChhbGxvd2VkUGF0aCkgfHwgXHJcbiAgICAgICAgICAvLyBBbHNvIGNoZWNrIHBhcmVudCBmb2xkZXIgZm9yIGZvbGRlciBub3Rlc1xyXG4gICAgICAgICAgKGZpbGUucGFyZW50Py5wYXRoIHx8ICcnKS5zdGFydHNXaXRoKGFsbG93ZWRQYXRoKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFpc0FsbG93ZWQpIHtcclxuICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtmaWxlLnBhdGh9IC0gc2tpcHBlZCAobm90IGluIGFsbG93ZWQgcGF0aHMpYCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBHZXQgcGFyZW50IGZvbGRlclxyXG4gICAgICBjb25zdCBwYXJlbnRGb2xkZXIgPSBmaWxlLnBhcmVudDtcclxuICAgICAgaWYgKCFwYXJlbnRGb2xkZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGUucGF0aH0gLSBza2lwcGVkIChubyBwYXJlbnQgZm9sZGVyKWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBwYXJlbnROb3RlOiBURmlsZSB8IG51bGwgPSBudWxsO1xyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIGZvbGRlciBub3RlIChuYW1lIG1hdGNoZXMgcGFyZW50IGZvbGRlciBleGFjdGx5KVxyXG4gICAgICBjb25zdCBpc0ZvbGRlck5vdGUgPSBmaWxlLmJhc2VuYW1lID09PSBwYXJlbnRGb2xkZXIubmFtZTtcclxuICAgICAgXHJcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBmb2xkZXIgbm90ZSBidXQgdGhlIGNhc2UgZG9lc24ndCBtYXRjaCwgc2tpcCBpdFxyXG4gICAgICBpZiAoZmlsZS5iYXNlbmFtZS50b0xvd2VyQ2FzZSgpID09PSBwYXJlbnRGb2xkZXIubmFtZS50b0xvd2VyQ2FzZSgpICYmICFpc0ZvbGRlck5vdGUpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGUucGF0aH0gLSBza2lwcGVkIChmb2xkZXIgbm90ZSBuYW1lIGNhc2UgZG9lc24ndCBtYXRjaCBmb2xkZXIgbmFtZSlgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAoaXNGb2xkZXJOb3RlKSB7XHJcbiAgICAgICAgLy8gRm9yIGZvbGRlciBub3RlcywgbG9vayBmb3IgYSBub3RlIG1hdGNoaW5nIHRoZSBncmFuZHBhcmVudCBmb2xkZXJcclxuICAgICAgICBjb25zdCBncmFuZHBhcmVudEZvbGRlciA9IHBhcmVudEZvbGRlci5wYXJlbnQ7XHJcbiAgICAgICAgaWYgKGdyYW5kcGFyZW50Rm9sZGVyKSB7XHJcbiAgICAgICAgICAvLyBGaW5kIGEgbm90ZSB0aGF0IGV4YWN0bHkgbWF0Y2hlcyB0aGUgZ3JhbmRwYXJlbnQgZm9sZGVyIG5hbWVcclxuICAgICAgICAgIHBhcmVudE5vdGUgPSB0aGlzLmFwcC52YXVsdFxyXG4gICAgICAgICAgICAuZ2V0TWFya2Rvd25GaWxlcygpXHJcbiAgICAgICAgICAgIC5maW5kKChmKSA9PiBcclxuICAgICAgICAgICAgICBmLmJhc2VuYW1lID09PSBncmFuZHBhcmVudEZvbGRlci5uYW1lICYmIFxyXG4gICAgICAgICAgICAgIGYucGFyZW50Py5wYXRoID09PSBncmFuZHBhcmVudEZvbGRlci5wYXRoICYmXHJcbiAgICAgICAgICAgICAgZiAhPT0gZmlsZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGb3IgcmVndWxhciBub3RlcywgbG9vayBmb3IgYSBub3RlIG1hdGNoaW5nIHRoZSBwYXJlbnQgZm9sZGVyXHJcbiAgICAgICAgLy8gRmluZCBhIG5vdGUgdGhhdCBleGFjdGx5IG1hdGNoZXMgdGhlIHBhcmVudCBmb2xkZXIgbmFtZVxyXG4gICAgICAgIHBhcmVudE5vdGUgPSB0aGlzLmFwcC52YXVsdFxyXG4gICAgICAgICAgLmdldE1hcmtkb3duRmlsZXMoKVxyXG4gICAgICAgICAgLmZpbmQoKGYpID0+IFxyXG4gICAgICAgICAgICBmLmJhc2VuYW1lID09PSBwYXJlbnRGb2xkZXIubmFtZSAmJiBcclxuICAgICAgICAgICAgZi5wYXJlbnQ/LnBhdGggPT09IHBhcmVudEZvbGRlci5wYXRoICYmXHJcbiAgICAgICAgICAgIGYgIT09IGZpbGVcclxuICAgICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghcGFyZW50Tm90ZSkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldEZvbGRlciA9IGlzRm9sZGVyTm90ZSA/IHBhcmVudEZvbGRlci5wYXJlbnQ/Lm5hbWUgOiBwYXJlbnRGb2xkZXIubmFtZTtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGUucGF0aH0gLSBza2lwcGVkIChubyBtYXRjaGluZyBwYXJlbnQgbm90ZSBmb3IgZm9sZGVyICR7dGFyZ2V0Rm9sZGVyfSlgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgZnJvbnRtYXR0ZXJcclxuICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcclxuICAgICAgY29uc3QgY3VycmVudFBhcmVudCA9IGNhY2hlPy5mcm9udG1hdHRlcj8ucGFyZW50O1xyXG5cclxuICAgICAgLy8gT25seSB1cGRhdGUgaWYgdGhlIHBhcmVudCBmaWVsZCBkb2Vzbid0IGV4aXN0IG9yIGlzIGRpZmZlcmVudFxyXG4gICAgICBjb25zdCBuZXdQYXJlbnQgPSBcIltbXCIgKyBwYXJlbnROb3RlLm5hbWUucmVwbGFjZSgnLm1kJywgJycpICsgXCJdXVwiO1xyXG4gICAgICBpZiAoY3VycmVudFBhcmVudCAhPT0gbmV3UGFyZW50KSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGUsIChmcm9udG1hdHRlcikgPT4ge1xyXG4gICAgICAgICAgZnJvbnRtYXR0ZXIucGFyZW50ID0gbmV3UGFyZW50O1xyXG4gICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGUucGF0aH0gLSBmcm9udG1hdHRlciB1cGRhdGVkIHdpdGggcGFyZW50OiAke25ld1BhcmVudH1gKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGUucGF0aH0gLSBza2lwcGVkIChwYXJlbnQgYWxyZWFkeSBzZXQgY29ycmVjdGx5KWApO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGAke2ZpbGUucGF0aH0gLSBlcnJvciB1cGRhdGluZyBwYXJlbnQgbGluazpgLCBlcnJvcik7XHJcbiAgICAgIG5ldyBOb3RpY2UoYEVycm9yIHVwZGF0aW5nIHBhcmVudCBsaW5rIGZvciAke2ZpbGUucGF0aH1gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9udW5sb2FkKCkge1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwidW5sb2FkaW5nIHBsdWdpblwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGhhbmRsZUZvbGRlclJlbmFtZShmb2xkZXI6IFRGb2xkZXIpIHtcclxuICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xyXG4gICAgICBjb25zb2xlLmxvZyhgRm9sZGVyIHJlbmFtZWQvbW9kaWZpZWQ6ICR7Zm9sZGVyLnBhdGh9LCB1cGRhdGluZyBhbGwgZmlsZXMgaW5zaWRlYCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IGFsbCBtYXJrZG93biBmaWxlcyBpbiB0aGlzIGZvbGRlciBhbmQgc3ViZm9sZGVyc1xyXG4gICAgY29uc3QgZmlsZXNJbkZvbGRlciA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKVxyXG4gICAgICAgIC5maWx0ZXIoZiA9PiB7XHJcbiAgICAgICAgICAvLyBGb3Igcm9vdCBmb2xkZXIsIHByb2Nlc3MgYWxsIGZpbGVzXHJcbiAgICAgICAgICBpZiAoZm9sZGVyLmlzUm9vdCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gRm9yIG90aGVyIGZvbGRlcnMsIG9ubHkgcHJvY2VzcyBmaWxlcyBpbiB0aGF0IGZvbGRlclxyXG4gICAgICAgICAgcmV0dXJuIGYucGF0aC5zdGFydHNXaXRoKGZvbGRlci5wYXRoICsgJy8nKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgZWFjaCBmaWxlXHJcbiAgICBmb3IgKGNvbnN0IGNoaWxkRmlsZSBvZiBmaWxlc0luRm9sZGVyKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQYXJlbnRMaW5rKGNoaWxkRmlsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWxzbyB1cGRhdGUgdGhlIGZvbGRlciBub3RlIGlmIGl0IGV4aXN0cyAoc2tpcCBmb3Igcm9vdCBmb2xkZXIpXHJcbiAgICBpZiAoIWZvbGRlci5pc1Jvb3QoKSkge1xyXG4gICAgICAgIGNvbnN0IGZvbGRlck5vdGUgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKClcclxuICAgICAgICAgICAgLmZpbmQoZiA9PiBmLmJhc2VuYW1lID09PSBmb2xkZXIubmFtZSAmJiBcclxuICAgICAgICAgICAgICAgICAgICAgIGYucGFyZW50Py5wYXRoID09PSBmb2xkZXIucGF0aCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGZvbGRlck5vdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXBkYXRpbmcgZm9sZGVyIG5vdGU6ICR7Zm9sZGVyTm90ZS5wYXRofWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhmb2xkZXJOb3RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBQYXJlbnRMaW5rU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG4gIHBsdWdpbjogUGFyZW50TGluaztcclxuICBwcml2YXRlIGZvbGRlcklucHV0RWw6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBzdWdnZXN0aW9uQ29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcclxuICBwcml2YXRlIGFsbG93ZWRQYXRoc0NvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFBhcmVudExpbmspIHtcclxuICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gIH1cclxuXHJcbiAgZGlzcGxheSgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzO1xyXG4gICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDJcIiwge3RleHQ6IFwiUGFyZW50IExpbmsgU2V0dGluZ3NcIn0pO1xyXG5cclxuICAgIC8vIEJhc2ljIHNldHRpbmdzIChlbmFibGVkIGFuZCBsb2dzKVxyXG4gICAgdGhpcy5hZGRCYXNpY1NldHRpbmdzKGNvbnRhaW5lckVsKTtcclxuICAgIFxyXG4gICAgLy8gRm9sZGVyIHJlZnJlc2ggc2V0dGluZ1xyXG4gICAgdGhpcy5hZGRGb2xkZXJSZWZyZXNoU2V0dGluZyhjb250YWluZXJFbCk7XHJcblxyXG4gICAgLy8gQWxsb3dlZCBwYXRocyBzZWN0aW9uXHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImgzXCIsIHt0ZXh0OiBcIkFsbG93ZWQgUGF0aHNcIn0pO1xyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAgICAgdGV4dDogXCJTcGVjaWZ5IHBhdGhzIHdoZXJlIHRoZSBwbHVnaW4gc2hvdWxkIHdvcmsuIExlYXZlIGVtcHR5IHRvIGFsbG93IGFsbCBwYXRocy5cIixcclxuICAgICAgY2xzOiBcInNldHRpbmctaXRlbS1kZXNjcmlwdGlvblwiXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDb250YWluZXIgZm9yIGFsbG93ZWQgcGF0aHNcclxuICAgIHRoaXMuYWxsb3dlZFBhdGhzQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiBcInBhcmVudC1saW5rLWFsbG93ZWQtcGF0aHNcIiB9KTtcclxuXHJcbiAgICAvLyBBZGQgYnV0dG9uIGZvciBuZXcgcGF0aFxyXG4gICAgY29uc3QgYWRkQnV0dG9uID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IGJ1dHRvblxyXG4gICAgICAgIC5zZXRCdXR0b25UZXh0KFwiQWRkIFBhdGhcIilcclxuICAgICAgICAuc2V0Q2xhc3MoXCJtb2Qtc2V0dGluZy1idXR0b25cIilcclxuICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmFkZEFsbG93ZWRQYXRoSW5wdXQoKTtcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgLy8gQWRkIGV4aXN0aW5nIHBhdGhzXHJcbiAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuYWxsb3dlZFBhdGhzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aGlzLmFkZEFsbG93ZWRQYXRoSW5wdXQoKTsgLy8gQWRkIG9uZSBlbXB0eSBpbnB1dCBieSBkZWZhdWx0XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hbGxvd2VkUGF0aHMuZm9yRWFjaChwYXRoID0+IHtcclxuICAgICAgICB0aGlzLmFkZEFsbG93ZWRQYXRoSW5wdXQocGF0aCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVwZGF0ZSBzdHlsZXNcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwic3R5bGVcIiwge1xyXG4gICAgICB0ZXh0OiBgXHJcbiAgICAgICAgLnBhcmVudC1saW5rLWlucHV0LWNvbnRhaW5lciB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICBmbGV4OiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICAucGFyZW50LWxpbmstaW5wdXQtY29udGFpbmVyIGlucHV0IHtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgcGFkZGluZzogNnB4IDEycHg7XHJcbiAgICAgICAgICBoZWlnaHQ6IHZhcigtLWlucHV0LWhlaWdodCk7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWZvcm0tZmllbGQpO1xyXG4gICAgICAgICAgYm9yZGVyOiB2YXIoLS1pbnB1dC1ib3JkZXItd2lkdGgpIHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcclxuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XHJcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1yYWRpdXMtcyk7XHJcbiAgICAgICAgICBmb250LXNpemU6IHZhcigtLWZvbnQtdWktc21hbGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAucGFyZW50LWxpbmstc3VnZ2VzdGlvbi1jb250YWluZXIge1xyXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBtYXgtaGVpZ2h0OiAyMDBweDtcclxuICAgICAgICAgIG92ZXJmbG93LXk6IGF1dG87XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xyXG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xyXG4gICAgICAgICAgei1pbmRleDogMTAwO1xyXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzLXMpO1xyXG4gICAgICAgICAgYm94LXNoYWRvdzogdmFyKC0tc2hhZG93LXMpO1xyXG4gICAgICAgICAgbWFyZ2luLXRvcDogNHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAucGFyZW50LWxpbmstc3VnZ2VzdGlvbiB7XHJcbiAgICAgICAgICBwYWRkaW5nOiA4cHggMTJweDtcclxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tZm9udC11aS1zbWFsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5wYXJlbnQtbGluay1zdWdnZXN0aW9uOmhvdmVyLFxyXG4gICAgICAgIC5wYXJlbnQtbGluay1zdWdnZXN0aW9uLmlzLXNlbGVjdGVkIHtcclxuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItaG92ZXIpO1xyXG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtYWNjZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnBhcmVudC1saW5rLWFsbG93ZWQtcGF0aCB7XHJcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgIGdhcDogOHB4O1xyXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogOHB4O1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBwYWRkaW5nOiAwIDIwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5wYXJlbnQtbGluay1yZW1vdmUtYnV0dG9uIHtcclxuICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWVycm9yKTtcclxuICAgICAgICAgIGJvcmRlcjogbm9uZTtcclxuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW9uLWFjY2VudCk7XHJcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1yYWRpdXMtcyk7XHJcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICBoZWlnaHQ6IHZhcigtLWlucHV0LWhlaWdodCk7XHJcbiAgICAgICAgICB3aWR0aDogdmFyKC0taW5wdXQtaGVpZ2h0KTtcclxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICBmb250LXNpemU6IDE4cHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5wYXJlbnQtbGluay1yZW1vdmUtYnV0dG9uOmhvdmVyIHtcclxuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItZXJyb3ItaG92ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAucGFyZW50LWxpbmstYWxsb3dlZC1wYXRocyB7XHJcbiAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEycHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5zZXR0aW5nLWl0ZW0ubW9kLXNldHRpbmctYnV0dG9uIHtcclxuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcclxuICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDIwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICBgXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkQmFzaWNTZXR0aW5ncyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZShcIkVuYWJsZSBhdXRvbWF0aWMgcGFyZW50IGxpbmtpbmdcIilcclxuICAgICAgLnNldERlc2MoXCJBdXRvbWF0aWNhbGx5IGFkZCBwYXJlbnQgbGlua3MgdG8gZmlsZXMgd2hlbiB0aGV5IGFyZSBjcmVhdGVkIG9yIG1vdmVkXCIpXHJcbiAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxyXG4gICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVkKVxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZWQgPSB2YWx1ZTtcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJFbmFibGUgZGV0YWlsZWQgbG9nc1wiKVxyXG4gICAgICAuc2V0RGVzYyhcIlNob3cgYWRkaXRpb25hbCBwcm9jZXNzaW5nIGRldGFpbHMgaW4gdGhlIGNvbnNvbGVcIilcclxuICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXHJcbiAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRldGFpbGVkTG9ncylcclxuICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZXRhaWxlZExvZ3MgPSB2YWx1ZTtcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgIH0pKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkQWxsb3dlZFBhdGhJbnB1dChpbml0aWFsVmFsdWU6IHN0cmluZyA9IFwiXCIpIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuYWxsb3dlZFBhdGhzQ29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogXCJwYXJlbnQtbGluay1hbGxvd2VkLXBhdGhcIiB9KTtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIGlucHV0IHdpdGggYXV0b2NvbXBsZXRlXHJcbiAgICBjb25zdCBpbnB1dENvbnRhaW5lciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6IFwicGFyZW50LWxpbmstaW5wdXQtY29udGFpbmVyXCIgfSk7XHJcbiAgICBjb25zdCBpbnB1dCA9IGlucHV0Q29udGFpbmVyLmNyZWF0ZUVsKFwiaW5wdXRcIiwge1xyXG4gICAgICB0eXBlOiBcInRleHRcIixcclxuICAgICAgdmFsdWU6IGluaXRpYWxWYWx1ZSxcclxuICAgICAgcGxhY2Vob2xkZXI6IFwiVHlwZSBmb2xkZXIgcGF0aC4uLlwiXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIHN1Z2dlc3Rpb25zIGNvbnRhaW5lclxyXG4gICAgY29uc3Qgc3VnZ2VzdGlvbkNvbnRhaW5lciA9IGlucHV0Q29udGFpbmVyLmNyZWF0ZURpdih7IFxyXG4gICAgICBjbHM6IFwicGFyZW50LWxpbmstc3VnZ2VzdGlvbi1jb250YWluZXJcIiBcclxuICAgIH0pO1xyXG4gICAgc3VnZ2VzdGlvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgLy8gQWRkIHJlbW92ZSBidXR0b25cclxuICAgIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGNvbnRhaW5lci5jcmVhdGVFbChcImJ1dHRvblwiLCB7XHJcbiAgICAgIHRleHQ6IFwiXHUwMEQ3XCIsXHJcbiAgICAgIHRpdGxlOiBcIlJlbW92ZSBwYXRoXCIsXHJcbiAgICAgIGNsczogXCJwYXJlbnQtbGluay1yZW1vdmUtYnV0dG9uXCJcclxuICAgIH0pO1xyXG4gICAgcmVtb3ZlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcclxuICAgICAgdGhpcy5zYXZlQWxsb3dlZFBhdGhzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBzZWxlY3RlZEluZGV4ID0gLTE7XHJcbiAgICBjb25zdCBoYW5kbGVLZXlkb3duID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbkNvbnRhaW5lci5jaGlsZHJlbjtcclxuICAgICAgaWYgKHN1Z2dlc3Rpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCJBcnJvd0Rvd25cIiB8fCBldmVudC5rZXkgPT09IFwiQXJyb3dVcFwiKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBVcGRhdGUgc2VsZWN0ZWQgaW5kZXhcclxuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIkFycm93RG93blwiKSB7XHJcbiAgICAgICAgICBzZWxlY3RlZEluZGV4ID0gKHNlbGVjdGVkSW5kZXggKyAxKSAlIHN1Z2dlc3Rpb25zLmxlbmd0aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IHNlbGVjdGVkSW5kZXggPD0gMCA/IHN1Z2dlc3Rpb25zLmxlbmd0aCAtIDEgOiBzZWxlY3RlZEluZGV4IC0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB2aXN1YWwgc2VsZWN0aW9uXHJcbiAgICAgICAgQXJyYXkuZnJvbShzdWdnZXN0aW9ucykuZm9yRWFjaCgoZWwsIGkpID0+IHtcclxuICAgICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoXCJpcy1zZWxlY3RlZFwiLCBpID09PSBzZWxlY3RlZEluZGV4KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIiAmJiBzZWxlY3RlZEluZGV4ID49IDApIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkU3VnZ2VzdGlvbiA9IHN1Z2dlc3Rpb25zW3NlbGVjdGVkSW5kZXhdIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgIGlucHV0LnZhbHVlID0gc2VsZWN0ZWRTdWdnZXN0aW9uLnRleHRDb250ZW50IHx8IFwiXCI7XHJcbiAgICAgICAgc3VnZ2VzdGlvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgc2VsZWN0ZWRJbmRleCA9IC0xO1xyXG4gICAgICAgIHRoaXMuc2F2ZUFsbG93ZWRQYXRocygpO1xyXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgIHN1Z2dlc3Rpb25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSAtMTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBBZGQgaW5wdXQgaGFuZGxlciBmb3IgYXV0b2NvbXBsZXRlXHJcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICBzZWxlY3RlZEluZGV4ID0gLTE7ICAvLyBSZXNldCBzZWxlY3Rpb24gb24gbmV3IGlucHV0XHJcbiAgICAgIHRoaXMudXBkYXRlUGF0aFN1Z2dlc3Rpb25zKGlucHV0LCBzdWdnZXN0aW9uQ29udGFpbmVyKTtcclxuICAgICAgdGhpcy5zYXZlQWxsb3dlZFBhdGhzKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLnVwZGF0ZVBhdGhTdWdnZXN0aW9ucyhpbnB1dCwgc3VnZ2VzdGlvbkNvbnRhaW5lcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCAoKSA9PiB7XHJcbiAgICAgIC8vIERlbGF5IGhpZGluZyBzdWdnZXN0aW9ucyB0byBhbGxvdyBmb3IgY2xpY2tzXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHN1Z2dlc3Rpb25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSAtMTtcclxuICAgICAgfSwgMjAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleWRvd24pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVQYXRoU3VnZ2VzdGlvbnMoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsIHN1Z2dlc3Rpb25Db250YWluZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBjb25zdCBpbnB1dFZhbHVlID0gaW5wdXQudmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGZvbGRlcnMgPSB0aGlzLmdldEFsbEZvbGRlcnMoKTtcclxuICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gZm9sZGVycy5maWx0ZXIoZiA9PiBcclxuICAgICAgZi5wYXRoLnRvTG93ZXJDYXNlKCkuY29udGFpbnMoaW5wdXRWYWx1ZSlcclxuICAgICk7XHJcblxyXG4gICAgc3VnZ2VzdGlvbkNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgXHJcbiAgICBpZiAoc3VnZ2VzdGlvbnMubGVuZ3RoID4gMCAmJiBpbnB1dFZhbHVlKSB7XHJcbiAgICAgIHN1Z2dlc3Rpb25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgc3VnZ2VzdGlvbnMuZm9yRWFjaChmb2xkZXIgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25FbCA9IHN1Z2dlc3Rpb25Db250YWluZXIuY3JlYXRlRGl2KHtcclxuICAgICAgICAgIGNsczogXCJwYXJlbnQtbGluay1zdWdnZXN0aW9uXCIsXHJcbiAgICAgICAgICB0ZXh0OiBmb2xkZXIucGF0aFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHN1Z2dlc3Rpb25FbC5vbm1vdXNlZG93biA9ICgpID0+IHtcclxuICAgICAgICAgIGlucHV0LnZhbHVlID0gZm9sZGVyLnBhdGg7XHJcbiAgICAgICAgICBzdWdnZXN0aW9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgIHRoaXMuc2F2ZUFsbG93ZWRQYXRocygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3VnZ2VzdGlvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNhdmVBbGxvd2VkUGF0aHMoKSB7XHJcbiAgICBjb25zdCBpbnB1dHMgPSB0aGlzLmFsbG93ZWRQYXRoc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRcIik7XHJcbiAgICBjb25zdCBwYXRocyA9IEFycmF5LmZyb20oaW5wdXRzKVxyXG4gICAgICAubWFwKGlucHV0ID0+IGlucHV0LnZhbHVlLnRyaW0oKSlcclxuICAgICAgLmZpbHRlcihwYXRoID0+IHBhdGgubGVuZ3RoID4gMCk7XHJcbiAgICBcclxuICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFsbG93ZWRQYXRocyA9IHBhdGhzO1xyXG4gICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEFsbEZvbGRlcnMoKTogVEZvbGRlcltdIHtcclxuICAgIGNvbnN0IGZvbGRlcnM6IFRGb2xkZXJbXSA9IFtdO1xyXG4gICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRBbGxMb2FkZWRGaWxlcygpO1xyXG4gICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURm9sZGVyKSB7XHJcbiAgICAgICAgZm9sZGVycy5wdXNoKGZpbGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmb2xkZXJzO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZGRGb2xkZXJSZWZyZXNoU2V0dGluZyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGZvbGRlclNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJSZWZyZXNoIGZvbGRlciBwYXJlbnRzXCIpXHJcbiAgICAgIC5zZXREZXNjKFwiVHlwZSBmb2xkZXIgcGF0aCB0byByZWZyZXNoIHBhcmVudCBsaW5rcyBmb3IgYWxsIGZpbGVzIGluIHRoYXQgZm9sZGVyXCIpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBjb250YWluZXIgZm9yIHRoZSBpbnB1dCBhbmQgc3VnZ2VzdGlvbnNcclxuICAgIGNvbnN0IGlucHV0Q29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiBcInBhcmVudC1saW5rLWlucHV0LWNvbnRhaW5lclwiIH0pO1xyXG4gICAgdGhpcy5mb2xkZXJJbnB1dEVsID0gaW5wdXRDb250YWluZXIuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XHJcbiAgICAgIHR5cGU6IFwidGV4dFwiLFxyXG4gICAgICB2YWx1ZTogdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFzdFJlZnJlc2hlZEZvbGRlciB8fCBcIlwiLFxyXG4gICAgICBwbGFjZWhvbGRlcjogXCJUeXBlIGZvbGRlciBwYXRoLi4uXCJcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENyZWF0ZSBzdWdnZXN0aW9ucyBjb250YWluZXJcclxuICAgIHRoaXMuc3VnZ2VzdGlvbkNvbnRhaW5lciA9IGlucHV0Q29udGFpbmVyLmNyZWF0ZURpdih7IFxyXG4gICAgICBjbHM6IFwicGFyZW50LWxpbmstc3VnZ2VzdGlvbi1jb250YWluZXJcIiBcclxuICAgIH0pO1xyXG4gICAgdGhpcy5zdWdnZXN0aW9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAvLyBBZGQgcmVmcmVzaCBidXR0b25cclxuICAgIGZvbGRlclNldHRpbmcuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cclxuICAgICAgLnNldEJ1dHRvblRleHQoXCJSZWZyZXNoXCIpXHJcbiAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBmb2xkZXJQYXRoID0gdGhpcy5mb2xkZXJJbnB1dEVsLnZhbHVlO1xyXG4gICAgICAgIC8vIEhhbmRsZSByb290IHBhdGggc3BlY2lhbGx5XHJcbiAgICAgICAgaWYgKGZvbGRlclBhdGggPT09IFwiL1wiIHx8IGZvbGRlclBhdGggPT09IFwiXCIpIHtcclxuICAgICAgICAgIC8vIEdldCB0aGUgcm9vdCBmb2xkZXJcclxuICAgICAgICAgIGNvbnN0IHJvb3RGb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRSb290KCk7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXN0UmVmcmVzaGVkRm9sZGVyID0gXCIvXCI7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmhhbmRsZUZvbGRlclJlbmFtZShyb290Rm9sZGVyKTtcclxuICAgICAgICAgIG5ldyBOb3RpY2UoYFVwZGF0ZWQgcGFyZW50IGxpbmtzIGluIHRoZSBlbnRpcmUgdmF1bHRgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgZm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZvbGRlclBhdGgpO1xyXG4gICAgICAgICAgaWYgKGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFzdFJlZnJlc2hlZEZvbGRlciA9IGZvbGRlclBhdGg7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5oYW5kbGVGb2xkZXJSZW5hbWUoZm9sZGVyKTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgVXBkYXRlZCBwYXJlbnQgbGlua3MgaW4gJHtmb2xkZXJQYXRofWApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGZvbGRlciBwYXRoXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSkpO1xyXG5cclxuICAgIC8vIEFkZCBpbnB1dCBoYW5kbGVyIGZvciBhdXRvY29tcGxldGVcclxuICAgIHRoaXMuZm9sZGVySW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLnVwZGF0ZVBhdGhTdWdnZXN0aW9ucyh0aGlzLmZvbGRlcklucHV0RWwsIHRoaXMuc3VnZ2VzdGlvbkNvbnRhaW5lcik7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuZm9sZGVySW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLnVwZGF0ZVBhdGhTdWdnZXN0aW9ucyh0aGlzLmZvbGRlcklucHV0RWwsIHRoaXMuc3VnZ2VzdGlvbkNvbnRhaW5lcik7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuZm9sZGVySW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCAoKSA9PiB7XHJcbiAgICAgIC8vIERlbGF5IGhpZGluZyBzdWdnZXN0aW9ucyB0byBhbGxvdyBmb3IgY2xpY2tzXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc3VnZ2VzdGlvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIH0sIDIwMCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFXTztBQVNQLElBQU0sbUJBQXVDO0FBQUEsRUFDM0MsU0FBUztBQUFBLEVBQ1QsY0FBYztBQUFBLEVBQ2QsY0FBYyxDQUFDO0FBQUE7QUFDakI7QUFFQSxJQUFxQixhQUFyQixjQUF3Qyx1QkFBTztBQUFBLEVBRzdDLE1BQU0sU0FBUztBQUNiLFVBQU0sS0FBSyxhQUFhO0FBR3hCLFNBQUssZUFBZTtBQUdwQixTQUFLLGNBQWMsSUFBSSxxQkFBcUIsS0FBSyxLQUFLLElBQUksQ0FBQztBQUFBLEVBQzdEO0FBQUEsRUFFUSxpQkFBaUI7QUFFdkIsU0FBSztBQUFBLE1BQ0gsS0FBSyxJQUFJLE1BQU0sR0FBRyxVQUFVLE9BQU8sU0FBUztBQUMxQyxZQUFJLGdCQUFnQix5QkFBUyxLQUFLLFNBQVMsU0FBUztBQUNsRCxnQkFBTSxLQUFLLGlCQUFpQixJQUFJO0FBQUEsUUFDbEM7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBR0EsU0FBSztBQUFBLE1BQ0gsS0FBSyxJQUFJLE1BQU0sR0FBRyxVQUFVLE9BQU8sTUFBTSxZQUFZO0FBbkQzRDtBQW9EUSxZQUFJLENBQUMsS0FBSyxTQUFTO0FBQVM7QUFFNUIsWUFBSSxnQkFBZ0IsdUJBQU87QUFFekIsZ0JBQU0sS0FBSyxpQkFBaUIsSUFBSTtBQUdoQyxnQkFBTSxlQUFlLEtBQUssZUFBYSxVQUFLLFdBQUwsbUJBQWE7QUFDcEQsY0FBSSxjQUFjO0FBQ2hCLGdCQUFJLEtBQUssU0FBUyxjQUFjO0FBQzlCLHNCQUFRLElBQUksaURBQWdELFVBQUssV0FBTCxtQkFBYSxNQUFNO0FBQUEsWUFDakY7QUFHQSxrQkFBTSxhQUFhLEtBQUssSUFBSSxNQUFNLGlCQUFpQixFQUNoRCxPQUFPLE9BQUU7QUFuRXhCLGtCQUFBQSxLQUFBQztBQW1FMkIsdUJBQUFELE1BQUEsRUFBRSxXQUFGLGdCQUFBQSxJQUFVLFlBQVNDLE1BQUEsS0FBSyxXQUFMLGdCQUFBQSxJQUFhLFNBQVEsTUFBTTtBQUFBLGFBQUk7QUFHakUsdUJBQVcsYUFBYSxZQUFZO0FBQ2xDLGtCQUFJLEtBQUssU0FBUyxjQUFjO0FBQzlCLHdCQUFRLElBQUksd0JBQXdCLFVBQVUsTUFBTTtBQUFBLGNBQ3REO0FBQ0Esb0JBQU0sS0FBSyxpQkFBaUIsU0FBUztBQUFBLFlBQ3ZDO0FBQUEsVUFDRjtBQUFBLFFBQ0YsV0FBVyxnQkFBZ0IseUJBQVM7QUFDbEMsZ0JBQU0sS0FBSyxtQkFBbUIsSUFBSTtBQUFBLFFBQ3BDO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUdBLFNBQUs7QUFBQSxNQUNILEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxPQUFPLFNBQVM7QUFyRmxEO0FBc0ZRLFlBQUksQ0FBQyxLQUFLLFNBQVMsV0FBVyxFQUFFLGdCQUFnQjtBQUFRO0FBR3hELGNBQU0sUUFBUSxLQUFLLElBQUksY0FBYyxhQUFhLElBQUk7QUFDdEQsY0FBTSxjQUFjLCtCQUFPO0FBSTNCLGNBQU0sZUFBZSxLQUFLLGVBQWEsVUFBSyxXQUFMLG1CQUFhO0FBQ3BELFlBQUksaUJBQWlCLEVBQUMsMkNBQWEsV0FBVSxZQUFZLFdBQVcsS0FBSztBQUV2RSxjQUFJLEtBQUssU0FBUyxjQUFjO0FBQzlCLG9CQUFRLElBQUksb0NBQW9DLEtBQUsseUJBQXlCO0FBQUEsVUFDaEY7QUFDQSxnQkFBTSxLQUFLLG1CQUFtQixLQUFLLE1BQU07QUFBQSxRQUMzQztBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBQUEsRUFFQSxNQUFNLGtCQUFrQjtBQUN0QixRQUFJLEtBQUssU0FBUyxjQUFjO0FBQzlCLGNBQVEsSUFBSSxrQ0FBa0M7QUFDOUMsWUFBTUMsU0FBUSxLQUFLLElBQUksTUFBTSxpQkFBaUI7QUFDOUMsY0FBUSxJQUFJLFNBQVNBLE9BQU0sdUJBQXVCO0FBQUEsSUFDcEQ7QUFFQSxVQUFNLFFBQVEsS0FBSyxJQUFJLE1BQU0saUJBQWlCO0FBQzlDLGVBQVcsUUFBUSxPQUFPO0FBQ3hCLFVBQUksS0FBSyxTQUFTLGNBQWM7QUFDOUIsZ0JBQVEsSUFBSSxvQkFBb0IsS0FBSyxNQUFNO0FBQUEsTUFDN0M7QUFDQSxZQUFNLEtBQUssaUJBQWlCLElBQUk7QUFBQSxJQUNsQztBQUNBLFFBQUksdUJBQU8sMkNBQTJDO0FBQUEsRUFDeEQ7QUFBQSxFQUVBLE1BQU0saUJBQWlCLE1BQWE7QUEzSHRDO0FBNEhJLFFBQUk7QUFFRixVQUFJLEtBQUssU0FBUyxhQUFhLFNBQVMsR0FBRztBQUN6QyxjQUFNLFlBQVksS0FBSyxTQUFTLGFBQWE7QUFBQSxVQUFLLGlCQUFZO0FBL0h0RSxnQkFBQUY7QUFnSVUsd0JBQUssS0FBSyxXQUFXLFdBQVc7QUFBQSxlQUUvQkEsTUFBQSxLQUFLLFdBQUwsZ0JBQUFBLElBQWEsU0FBUSxJQUFJLFdBQVcsV0FBVztBQUFBO0FBQUEsUUFDbEQ7QUFFQSxZQUFJLENBQUMsV0FBVztBQUNkLGNBQUksS0FBSyxTQUFTLGNBQWM7QUFDOUIsb0JBQVEsSUFBSSxHQUFHLEtBQUssdUNBQXVDO0FBQUEsVUFDN0Q7QUFDQTtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBR0EsWUFBTSxlQUFlLEtBQUs7QUFDMUIsVUFBSSxDQUFDLGNBQWM7QUFDakIsWUFBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixrQkFBUSxJQUFJLEdBQUcsS0FBSyxtQ0FBbUM7QUFBQSxRQUN6RDtBQUNBO0FBQUEsTUFDRjtBQUVBLFVBQUksYUFBMkI7QUFHL0IsWUFBTSxlQUFlLEtBQUssYUFBYSxhQUFhO0FBR3BELFVBQUksS0FBSyxTQUFTLFlBQVksTUFBTSxhQUFhLEtBQUssWUFBWSxLQUFLLENBQUMsY0FBYztBQUNwRixZQUFJLEtBQUssU0FBUyxjQUFjO0FBQzlCLGtCQUFRLElBQUksR0FBRyxLQUFLLGtFQUFrRTtBQUFBLFFBQ3hGO0FBQ0E7QUFBQSxNQUNGO0FBRUEsVUFBSSxjQUFjO0FBRWhCLGNBQU0sb0JBQW9CLGFBQWE7QUFDdkMsWUFBSSxtQkFBbUI7QUFFckIsdUJBQWEsS0FBSyxJQUFJLE1BQ25CLGlCQUFpQixFQUNqQjtBQUFBLFlBQUssQ0FBQyxNQUFHO0FBMUt0QixrQkFBQUE7QUEyS2MsdUJBQUUsYUFBYSxrQkFBa0IsVUFDakNBLE1BQUEsRUFBRSxXQUFGLGdCQUFBQSxJQUFVLFVBQVMsa0JBQWtCLFFBQ3JDLE1BQU07QUFBQTtBQUFBLFVBQ1I7QUFBQSxRQUNKO0FBQUEsTUFDRixPQUFPO0FBR0wscUJBQWEsS0FBSyxJQUFJLE1BQ25CLGlCQUFpQixFQUNqQjtBQUFBLFVBQUssQ0FBQyxNQUFHO0FBckxwQixnQkFBQUE7QUFzTFkscUJBQUUsYUFBYSxhQUFhLFVBQzVCQSxNQUFBLEVBQUUsV0FBRixnQkFBQUEsSUFBVSxVQUFTLGFBQWEsUUFDaEMsTUFBTTtBQUFBO0FBQUEsUUFDUjtBQUFBLE1BQ0o7QUFFQSxVQUFJLENBQUMsWUFBWTtBQUNmLGNBQU0sZUFBZSxnQkFBZSxrQkFBYSxXQUFiLG1CQUFxQixPQUFPLGFBQWE7QUFDN0UsWUFBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixrQkFBUSxJQUFJLEdBQUcsS0FBSyxzREFBc0QsZUFBZTtBQUFBLFFBQzNGO0FBQ0E7QUFBQSxNQUNGO0FBR0EsWUFBTSxRQUFRLEtBQUssSUFBSSxjQUFjLGFBQWEsSUFBSTtBQUN0RCxZQUFNLGlCQUFnQixvQ0FBTyxnQkFBUCxtQkFBb0I7QUFHMUMsWUFBTSxZQUFZLE9BQU8sV0FBVyxLQUFLLFFBQVEsT0FBTyxFQUFFLElBQUk7QUFDOUQsVUFBSSxrQkFBa0IsV0FBVztBQUMvQixjQUFNLEtBQUssSUFBSSxZQUFZLG1CQUFtQixNQUFNLENBQUMsZ0JBQWdCO0FBQ25FLHNCQUFZLFNBQVM7QUFDckIsY0FBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixvQkFBUSxJQUFJLEdBQUcsS0FBSywyQ0FBMkMsV0FBVztBQUFBLFVBQzVFO0FBQUEsUUFDRixDQUFDO0FBQUEsTUFDSCxXQUFXLEtBQUssU0FBUyxjQUFjO0FBQ3JDLGdCQUFRLElBQUksR0FBRyxLQUFLLCtDQUErQztBQUFBLE1BQ3JFO0FBQUEsSUFDRixTQUFTLE9BQVA7QUFDQSxjQUFRLE1BQU0sR0FBRyxLQUFLLHNDQUFzQyxLQUFLO0FBQ2pFLFVBQUksdUJBQU8sa0NBQWtDLEtBQUssTUFBTTtBQUFBLElBQzFEO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUNULFFBQUksS0FBSyxTQUFTLGNBQWM7QUFDOUIsY0FBUSxJQUFJLGtCQUFrQjtBQUFBLElBQ2hDO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ25CLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDM0U7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNuQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNuQztBQUFBLEVBRUEsTUFBTSxtQkFBbUIsUUFBaUI7QUFDeEMsUUFBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixjQUFRLElBQUksNEJBQTRCLE9BQU8saUNBQWlDO0FBQUEsSUFDbEY7QUFHQSxVQUFNLGdCQUFnQixLQUFLLElBQUksTUFBTSxpQkFBaUIsRUFDakQsT0FBTyxPQUFLO0FBRVgsVUFBSSxPQUFPLE9BQU8sR0FBRztBQUNuQixlQUFPO0FBQUEsTUFDVDtBQUVBLGFBQU8sRUFBRSxLQUFLLFdBQVcsT0FBTyxPQUFPLEdBQUc7QUFBQSxJQUM1QyxDQUFDO0FBR0wsZUFBVyxhQUFhLGVBQWU7QUFDbkMsWUFBTSxLQUFLLGlCQUFpQixTQUFTO0FBQUEsSUFDekM7QUFHQSxRQUFJLENBQUMsT0FBTyxPQUFPLEdBQUc7QUFDbEIsWUFBTSxhQUFhLEtBQUssSUFBSSxNQUFNLGlCQUFpQixFQUM5QyxLQUFLLE9BQUU7QUFoUXBCO0FBZ1F1QixpQkFBRSxhQUFhLE9BQU8sVUFDdkIsT0FBRSxXQUFGLG1CQUFVLFVBQVMsT0FBTztBQUFBLE9BQUk7QUFFNUMsVUFBSSxZQUFZO0FBQ1osWUFBSSxLQUFLLFNBQVMsY0FBYztBQUM1QixrQkFBUSxJQUFJLHlCQUF5QixXQUFXLE1BQU07QUFBQSxRQUMxRDtBQUNBLGNBQU0sS0FBSyxpQkFBaUIsVUFBVTtBQUFBLE1BQzFDO0FBQUEsSUFDSjtBQUFBLEVBQ0Y7QUFDRjtBQUVBLElBQU0sdUJBQU4sY0FBbUMsaUNBQWlCO0FBQUEsRUFNbEQsWUFBWSxLQUFVLFFBQW9CO0FBQ3hDLFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2hCO0FBQUEsRUFFQSxVQUFnQjtBQUNkLFVBQU0sRUFBQyxZQUFXLElBQUk7QUFDdEIsZ0JBQVksTUFBTTtBQUNsQixnQkFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNLHVCQUFzQixDQUFDO0FBR3pELFNBQUssaUJBQWlCLFdBQVc7QUFHakMsU0FBSyx3QkFBd0IsV0FBVztBQUd4QyxnQkFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNLGdCQUFlLENBQUM7QUFDbEQsZ0JBQVksU0FBUyxLQUFLO0FBQUEsTUFDeEIsTUFBTTtBQUFBLE1BQ04sS0FBSztBQUFBLElBQ1AsQ0FBQztBQUdELFNBQUssd0JBQXdCLFlBQVksVUFBVSxFQUFFLEtBQUssNEJBQTRCLENBQUM7QUFHdkYsVUFBTSxZQUFZLElBQUksd0JBQVEsV0FBVyxFQUN0QyxVQUFVLFlBQVUsT0FDbEIsY0FBYyxVQUFVLEVBQ3hCLFNBQVMsb0JBQW9CLEVBQzdCLFFBQVEsTUFBTTtBQUNiLFdBQUssb0JBQW9CO0FBQUEsSUFDM0IsQ0FBQyxDQUFDO0FBR04sUUFBSSxLQUFLLE9BQU8sU0FBUyxhQUFhLFdBQVcsR0FBRztBQUNsRCxXQUFLLG9CQUFvQjtBQUFBLElBQzNCLE9BQU87QUFDTCxXQUFLLE9BQU8sU0FBUyxhQUFhLFFBQVEsVUFBUTtBQUNoRCxhQUFLLG9CQUFvQixJQUFJO0FBQUEsTUFDL0IsQ0FBQztBQUFBLElBQ0g7QUFHQSxnQkFBWSxTQUFTLFNBQVM7QUFBQSxNQUM1QixNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQXVFUixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRVEsaUJBQWlCLGFBQTBCO0FBQ2pELFFBQUksd0JBQVEsV0FBVyxFQUNwQixRQUFRLGlDQUFpQyxFQUN6QyxRQUFRLHdFQUF3RSxFQUNoRixVQUFVLFlBQVUsT0FDbEIsU0FBUyxLQUFLLE9BQU8sU0FBUyxPQUFPLEVBQ3JDLFNBQVMsT0FBTyxVQUFVO0FBQ3pCLFdBQUssT0FBTyxTQUFTLFVBQVU7QUFDL0IsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2pDLENBQUMsQ0FBQztBQUVOLFFBQUksd0JBQVEsV0FBVyxFQUNwQixRQUFRLHNCQUFzQixFQUM5QixRQUFRLG1EQUFtRCxFQUMzRCxVQUFVLFlBQVUsT0FDbEIsU0FBUyxLQUFLLE9BQU8sU0FBUyxZQUFZLEVBQzFDLFNBQVMsT0FBTyxVQUFVO0FBQ3pCLFdBQUssT0FBTyxTQUFTLGVBQWU7QUFDcEMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2pDLENBQUMsQ0FBQztBQUFBLEVBQ1I7QUFBQSxFQUVRLG9CQUFvQixlQUF1QixJQUFJO0FBQ3JELFVBQU0sWUFBWSxLQUFLLHNCQUFzQixVQUFVLEVBQUUsS0FBSywyQkFBMkIsQ0FBQztBQUcxRixVQUFNLGlCQUFpQixVQUFVLFVBQVUsRUFBRSxLQUFLLDhCQUE4QixDQUFDO0FBQ2pGLFVBQU0sUUFBUSxlQUFlLFNBQVMsU0FBUztBQUFBLE1BQzdDLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLGFBQWE7QUFBQSxJQUNmLENBQUM7QUFHRCxVQUFNLHNCQUFzQixlQUFlLFVBQVU7QUFBQSxNQUNuRCxLQUFLO0FBQUEsSUFDUCxDQUFDO0FBQ0Qsd0JBQW9CLE1BQU0sVUFBVTtBQUdwQyxVQUFNLGVBQWUsVUFBVSxTQUFTLFVBQVU7QUFBQSxNQUNoRCxNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxLQUFLO0FBQUEsSUFDUCxDQUFDO0FBQ0QsaUJBQWEsVUFBVSxNQUFNO0FBQzNCLGdCQUFVLE9BQU87QUFDakIsV0FBSyxpQkFBaUI7QUFBQSxJQUN4QjtBQUVBLFFBQUksZ0JBQWdCO0FBQ3BCLFVBQU0sZ0JBQWdCLENBQUMsVUFBeUI7QUFDOUMsWUFBTSxjQUFjLG9CQUFvQjtBQUN4QyxVQUFJLFlBQVksV0FBVztBQUFHO0FBRTlCLFVBQUksTUFBTSxRQUFRLGVBQWUsTUFBTSxRQUFRLFdBQVc7QUFDeEQsY0FBTSxlQUFlO0FBR3JCLFlBQUksTUFBTSxRQUFRLGFBQWE7QUFDN0IsMkJBQWlCLGdCQUFnQixLQUFLLFlBQVk7QUFBQSxRQUNwRCxPQUFPO0FBQ0wsMEJBQWdCLGlCQUFpQixJQUFJLFlBQVksU0FBUyxJQUFJLGdCQUFnQjtBQUFBLFFBQ2hGO0FBR0EsY0FBTSxLQUFLLFdBQVcsRUFBRSxRQUFRLENBQUMsSUFBSSxNQUFNO0FBQ3pDLGFBQUcsVUFBVSxPQUFPLGVBQWUsTUFBTSxhQUFhO0FBQUEsUUFDeEQsQ0FBQztBQUFBLE1BQ0gsV0FBVyxNQUFNLFFBQVEsV0FBVyxpQkFBaUIsR0FBRztBQUN0RCxjQUFNLGVBQWU7QUFDckIsY0FBTSxxQkFBcUIsWUFBWSxhQUFhO0FBQ3BELGNBQU0sUUFBUSxtQkFBbUIsZUFBZTtBQUNoRCw0QkFBb0IsTUFBTSxVQUFVO0FBQ3BDLHdCQUFnQjtBQUNoQixhQUFLLGlCQUFpQjtBQUFBLE1BQ3hCLFdBQVcsTUFBTSxRQUFRLFVBQVU7QUFDakMsNEJBQW9CLE1BQU0sVUFBVTtBQUNwQyx3QkFBZ0I7QUFBQSxNQUNsQjtBQUFBLElBQ0Y7QUFHQSxVQUFNLGlCQUFpQixTQUFTLE1BQU07QUFDcEMsc0JBQWdCO0FBQ2hCLFdBQUssc0JBQXNCLE9BQU8sbUJBQW1CO0FBQ3JELFdBQUssaUJBQWlCO0FBQUEsSUFDeEIsQ0FBQztBQUVELFVBQU0saUJBQWlCLFNBQVMsTUFBTTtBQUNwQyxXQUFLLHNCQUFzQixPQUFPLG1CQUFtQjtBQUFBLElBQ3ZELENBQUM7QUFFRCxVQUFNLGlCQUFpQixRQUFRLE1BQU07QUFFbkMsaUJBQVcsTUFBTTtBQUNmLDRCQUFvQixNQUFNLFVBQVU7QUFDcEMsd0JBQWdCO0FBQUEsTUFDbEIsR0FBRyxHQUFHO0FBQUEsSUFDUixDQUFDO0FBRUQsVUFBTSxpQkFBaUIsV0FBVyxhQUFhO0FBQUEsRUFDakQ7QUFBQSxFQUVRLHNCQUFzQixPQUF5QixxQkFBa0M7QUFDdkYsVUFBTSxhQUFhLE1BQU0sTUFBTSxZQUFZO0FBQzNDLFVBQU0sVUFBVSxLQUFLLGNBQWM7QUFDbkMsVUFBTSxjQUFjLFFBQVE7QUFBQSxNQUFPLE9BQ2pDLEVBQUUsS0FBSyxZQUFZLEVBQUUsU0FBUyxVQUFVO0FBQUEsSUFDMUM7QUFFQSx3QkFBb0IsTUFBTTtBQUUxQixRQUFJLFlBQVksU0FBUyxLQUFLLFlBQVk7QUFDeEMsMEJBQW9CLE1BQU0sVUFBVTtBQUNwQyxrQkFBWSxRQUFRLFlBQVU7QUFDNUIsY0FBTSxlQUFlLG9CQUFvQixVQUFVO0FBQUEsVUFDakQsS0FBSztBQUFBLFVBQ0wsTUFBTSxPQUFPO0FBQUEsUUFDZixDQUFDO0FBQ0QscUJBQWEsY0FBYyxNQUFNO0FBQy9CLGdCQUFNLFFBQVEsT0FBTztBQUNyQiw4QkFBb0IsTUFBTSxVQUFVO0FBQ3BDLGVBQUssaUJBQWlCO0FBQUEsUUFDeEI7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNILE9BQU87QUFDTCwwQkFBb0IsTUFBTSxVQUFVO0FBQUEsSUFDdEM7QUFBQSxFQUNGO0FBQUEsRUFFUSxtQkFBbUI7QUFDekIsVUFBTSxTQUFTLEtBQUssc0JBQXNCLGlCQUFpQixPQUFPO0FBQ2xFLFVBQU0sUUFBUSxNQUFNLEtBQUssTUFBTSxFQUM1QixJQUFJLFdBQVMsTUFBTSxNQUFNLEtBQUssQ0FBQyxFQUMvQixPQUFPLFVBQVEsS0FBSyxTQUFTLENBQUM7QUFFakMsU0FBSyxPQUFPLFNBQVMsZUFBZTtBQUNwQyxTQUFLLE9BQU8sYUFBYTtBQUFBLEVBQzNCO0FBQUEsRUFFUSxnQkFBMkI7QUFDakMsVUFBTSxVQUFxQixDQUFDO0FBQzVCLFVBQU0sUUFBUSxLQUFLLElBQUksTUFBTSxrQkFBa0I7QUFDL0MsVUFBTSxRQUFRLFVBQVE7QUFDcEIsVUFBSSxnQkFBZ0IseUJBQVM7QUFDM0IsZ0JBQVEsS0FBSyxJQUFJO0FBQUEsTUFDbkI7QUFBQSxJQUNGLENBQUM7QUFDRCxXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRVEsd0JBQXdCLGFBQTBCO0FBQ3hELFVBQU0sZ0JBQWdCLElBQUksd0JBQVEsV0FBVyxFQUMxQyxRQUFRLHdCQUF3QixFQUNoQyxRQUFRLHVFQUF1RTtBQUdsRixVQUFNLGlCQUFpQixZQUFZLFVBQVUsRUFBRSxLQUFLLDhCQUE4QixDQUFDO0FBQ25GLFNBQUssZ0JBQWdCLGVBQWUsU0FBUyxTQUFTO0FBQUEsTUFDcEQsTUFBTTtBQUFBLE1BQ04sT0FBTyxLQUFLLE9BQU8sU0FBUyx1QkFBdUI7QUFBQSxNQUNuRCxhQUFhO0FBQUEsSUFDZixDQUFDO0FBR0QsU0FBSyxzQkFBc0IsZUFBZSxVQUFVO0FBQUEsTUFDbEQsS0FBSztBQUFBLElBQ1AsQ0FBQztBQUNELFNBQUssb0JBQW9CLE1BQU0sVUFBVTtBQUd6QyxrQkFBYyxVQUFVLFlBQVUsT0FDL0IsY0FBYyxTQUFTLEVBQ3ZCLFFBQVEsWUFBWTtBQUNuQixZQUFNLGFBQWEsS0FBSyxjQUFjO0FBRXRDLFVBQUksZUFBZSxPQUFPLGVBQWUsSUFBSTtBQUUzQyxjQUFNLGFBQWEsS0FBSyxJQUFJLE1BQU0sUUFBUTtBQUMxQyxhQUFLLE9BQU8sU0FBUyxzQkFBc0I7QUFDM0MsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUMvQixjQUFNLEtBQUssT0FBTyxtQkFBbUIsVUFBVTtBQUMvQyxZQUFJLHVCQUFPLDBDQUEwQztBQUFBLE1BQ3ZELE9BQU87QUFDTCxjQUFNLFNBQVMsS0FBSyxJQUFJLE1BQU0sc0JBQXNCLFVBQVU7QUFDOUQsWUFBSSxrQkFBa0IseUJBQVM7QUFDN0IsZUFBSyxPQUFPLFNBQVMsc0JBQXNCO0FBQzNDLGdCQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLGdCQUFNLEtBQUssT0FBTyxtQkFBbUIsTUFBTTtBQUMzQyxjQUFJLHVCQUFPLDJCQUEyQixZQUFZO0FBQUEsUUFDcEQsT0FBTztBQUNMLGNBQUksdUJBQU8sa0NBQWtDO0FBQUEsUUFDL0M7QUFBQSxNQUNGO0FBQUEsSUFDRixDQUFDLENBQUM7QUFHSixTQUFLLGNBQWMsaUJBQWlCLFNBQVMsTUFBTTtBQUNqRCxXQUFLLHNCQUFzQixLQUFLLGVBQWUsS0FBSyxtQkFBbUI7QUFBQSxJQUN6RSxDQUFDO0FBQ0QsU0FBSyxjQUFjLGlCQUFpQixTQUFTLE1BQU07QUFDakQsV0FBSyxzQkFBc0IsS0FBSyxlQUFlLEtBQUssbUJBQW1CO0FBQUEsSUFDekUsQ0FBQztBQUNELFNBQUssY0FBYyxpQkFBaUIsUUFBUSxNQUFNO0FBRWhELGlCQUFXLE1BQU07QUFDZixhQUFLLG9CQUFvQixNQUFNLFVBQVU7QUFBQSxNQUMzQyxHQUFHLEdBQUc7QUFBQSxJQUNSLENBQUM7QUFBQSxFQUNIO0FBQ0Y7IiwKICAibmFtZXMiOiBbIl9hIiwgIl9iIiwgImZpbGVzIl0KfQo=
