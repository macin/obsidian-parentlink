/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ParentLink
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enabled: true,
  detailedLogs: false
};
var ParentLink = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEvents();
    this.addSettingTab(new ParentLinkSettingTab(this.app, this));
  }
  registerEvents() {
    this.registerEvent(
      this.app.vault.on("create", async (file) => {
        if (file instanceof import_obsidian.TFile && this.settings.enabled) {
          await this.updateParentLink(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", async (file, oldPath) => {
        var _a, _b;
        if (!this.settings.enabled)
          return;
        if (file instanceof import_obsidian.TFile) {
          await this.updateParentLink(file);
          const isFolderNote = file.basename === ((_a = file.parent) == null ? void 0 : _a.name);
          if (isFolderNote) {
            if (this.settings.detailedLogs) {
              console.log(`Folder note renamed, updating child notes in ${(_b = file.parent) == null ? void 0 : _b.path}`);
            }
            const childFiles = this.app.vault.getMarkdownFiles().filter((f) => {
              var _a2, _b2;
              return ((_a2 = f.parent) == null ? void 0 : _a2.path) === ((_b2 = file.parent) == null ? void 0 : _b2.path) && f !== file;
            });
            for (const childFile of childFiles) {
              if (this.settings.detailedLogs) {
                console.log(`Updating child note: ${childFile.path}`);
              }
              await this.updateParentLink(childFile);
            }
          }
        } else if (file instanceof import_obsidian.TFolder) {
          await this.handleFolderRename(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", async (file) => {
        var _a;
        if (!this.settings.enabled || !(file instanceof import_obsidian.TFile))
          return;
        const cache = this.app.metadataCache.getFileCache(file);
        const frontmatter = cache == null ? void 0 : cache.frontmatter;
        const isFolderNote = file.basename === ((_a = file.parent) == null ? void 0 : _a.name);
        if (isFolderNote && (!(frontmatter == null ? void 0 : frontmatter.parent) || frontmatter.parent === "")) {
          if (this.settings.detailedLogs) {
            console.log(`Folder note modified externally: ${file.path}, updating children`);
          }
          await this.handleFolderRename(file.parent);
        }
      })
    );
  }
  async processAllFiles() {
    if (this.settings.detailedLogs) {
      console.log("Starting to process all files...");
      const files2 = this.app.vault.getMarkdownFiles();
      console.log(`Found ${files2.length} markdown files`);
    }
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      if (this.settings.detailedLogs) {
        console.log(`Processing file: ${file.path}`);
      }
      await this.updateParentLink(file);
    }
    new import_obsidian.Notice("ParentLink: Finished processing all files");
  }
  async updateParentLink(file) {
    var _a, _b;
    try {
      const parentFolder = file.parent;
      if (!parentFolder) {
        if (this.settings.detailedLogs) {
          console.log(`${file.path} - skipped (no parent folder)`);
        }
        return;
      }
      let parentNote = null;
      const isFolderNote = file.basename === parentFolder.name;
      if (file.basename.toLowerCase() === parentFolder.name.toLowerCase() && !isFolderNote) {
        if (this.settings.detailedLogs) {
          console.log(`${file.path} - skipped (folder note name case doesn't match folder name)`);
        }
        return;
      }
      if (isFolderNote) {
        const grandparentFolder = parentFolder.parent;
        if (grandparentFolder) {
          parentNote = this.app.vault.getMarkdownFiles().find(
            (f) => {
              var _a2;
              return f.basename === grandparentFolder.name && ((_a2 = f.parent) == null ? void 0 : _a2.path) === grandparentFolder.path && f !== file;
            }
          );
        }
      } else {
        parentNote = this.app.vault.getMarkdownFiles().find(
          (f) => {
            var _a2;
            return f.basename === parentFolder.name && ((_a2 = f.parent) == null ? void 0 : _a2.path) === parentFolder.path && f !== file;
          }
        );
      }
      if (!parentNote) {
        const targetFolder = isFolderNote ? (_a = parentFolder.parent) == null ? void 0 : _a.name : parentFolder.name;
        if (this.settings.detailedLogs) {
          console.log(`${file.path} - skipped (no matching parent note for folder ${targetFolder})`);
        }
        return;
      }
      const cache = this.app.metadataCache.getFileCache(file);
      const currentParent = (_b = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _b.parent;
      const newParent = "[[" + parentNote.name.replace(".md", "") + "]]";
      if (currentParent !== newParent) {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          frontmatter.parent = newParent;
          if (this.settings.detailedLogs) {
            console.log(`${file.path} - frontmatter updated with parent: ${newParent}`);
          }
        });
      } else if (this.settings.detailedLogs) {
        console.log(`${file.path} - skipped (parent already set correctly)`);
      }
    } catch (error) {
      console.error(`${file.path} - error updating parent link:`, error);
      new import_obsidian.Notice(`Error updating parent link for ${file.path}`);
    }
  }
  onunload() {
    if (this.settings.detailedLogs) {
      console.log("unloading plugin");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async handleFolderRename(folder) {
    if (this.settings.detailedLogs) {
      console.log(`Folder renamed/modified: ${folder.path}, updating all files inside`);
    }
    const filesInFolder = this.app.vault.getMarkdownFiles().filter((f) => {
      if (folder.isRoot()) {
        return true;
      }
      return f.path.startsWith(folder.path + "/");
    });
    for (const childFile of filesInFolder) {
      await this.updateParentLink(childFile);
    }
    if (!folder.isRoot()) {
      const folderNote = this.app.vault.getMarkdownFiles().find((f) => {
        var _a;
        return f.basename === folder.name && ((_a = f.parent) == null ? void 0 : _a.path) === folder.path;
      });
      if (folderNote) {
        if (this.settings.detailedLogs) {
          console.log(`Updating folder note: ${folderNote.path}`);
        }
        await this.updateParentLink(folderNote);
      }
    }
  }
};
var ParentLinkSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Parent Link Settings" });
    new import_obsidian.Setting(containerEl).setName("Enable automatic parent linking").setDesc("Automatically add parent links to files when they are created or moved").addToggle((toggle) => toggle.setValue(this.plugin.settings.enabled).onChange(async (value) => {
      this.plugin.settings.enabled = value;
      await this.plugin.saveSettings();
      if (value && this.plugin.settings.detailedLogs) {
        console.log("----------------------");
        console.log("ParentLink plugin enabled");
        console.log("----------------------");
      }
    }));
    containerEl.createEl("br");
    new import_obsidian.Setting(containerEl).setName("Enable detailed logs").setDesc("Show additional processing details in the console").addToggle((toggle) => toggle.setValue(this.plugin.settings.detailedLogs).onChange(async (value) => {
      this.plugin.settings.detailedLogs = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("br");
    const folderSetting = new import_obsidian.Setting(containerEl).setName("Refresh folder parents").setDesc("Type folder path to refresh parent links for all files in that folder");
    const inputContainer = containerEl.createDiv({ cls: "parent-link-input-container" });
    this.folderInputEl = inputContainer.createEl("input", {
      type: "text",
      value: this.plugin.settings.lastRefreshedFolder || "",
      placeholder: "Type folder path..."
    });
    this.suggestionContainer = inputContainer.createDiv({
      cls: "parent-link-suggestion-container"
    });
    this.suggestionContainer.style.display = "none";
    folderSetting.addButton((button) => button.setButtonText("Refresh").onClick(async () => {
      const folderPath = this.folderInputEl.value;
      if (folderPath === "/" || folderPath === "") {
        const rootFolder = this.app.vault.getRoot();
        this.plugin.settings.lastRefreshedFolder = "/";
        await this.plugin.saveSettings();
        await this.plugin.handleFolderRename(rootFolder);
        new import_obsidian.Notice(`Updated parent links in the entire vault`);
      } else {
        const folder = this.app.vault.getAbstractFileByPath(folderPath);
        if (folder instanceof import_obsidian.TFolder) {
          this.plugin.settings.lastRefreshedFolder = folderPath;
          await this.plugin.saveSettings();
          await this.plugin.handleFolderRename(folder);
          new import_obsidian.Notice(`Updated parent links in ${folderPath}`);
        } else {
          new import_obsidian.Notice("Please enter a valid folder path");
        }
      }
    }));
    this.folderInputEl.addEventListener("input", this.updateSuggestions.bind(this));
    this.folderInputEl.addEventListener("focus", this.updateSuggestions.bind(this));
    this.folderInputEl.addEventListener("blur", () => {
      setTimeout(() => {
        this.suggestionContainer.style.display = "none";
      }, 200);
    });
    containerEl.createEl("style", {
      text: `
        .parent-link-input-container {
          position: relative;
          margin-bottom: 12px;
        }
        .parent-link-input-container input {
          width: 100%;
          padding: 6px;
        }
        .parent-link-suggestion-container {
          position: absolute;
          width: 100%;
          max-height: 200px;
          overflow-y: auto;
          background: var(--background-primary);
          border: 1px solid var(--background-modifier-border);
          z-index: 100;
        }
        .parent-link-suggestion {
          padding: 6px;
          cursor: pointer;
        }
        .parent-link-suggestion:hover {
          background: var(--background-modifier-hover);
        }
      `
    });
  }
  updateSuggestions() {
    const input = this.folderInputEl.value.toLowerCase();
    const folders = this.getAllFolders();
    const suggestions = folders.filter(
      (f) => f.path.toLowerCase().contains(input)
    );
    this.suggestionContainer.empty();
    if (suggestions.length > 0 && input) {
      this.suggestionContainer.style.display = "block";
      suggestions.forEach((folder) => {
        const suggestionEl = this.suggestionContainer.createDiv({
          cls: "parent-link-suggestion",
          text: folder.path
        });
        suggestionEl.onmousedown = () => {
          this.folderInputEl.value = folder.path;
          this.suggestionContainer.style.display = "none";
        };
      });
    } else {
      this.suggestionContainer.style.display = "none";
    }
  }
  getAllFolders() {
    const folders = [];
    const files = this.app.vault.getAllLoadedFiles();
    files.forEach((file) => {
      if (file instanceof import_obsidian.TFolder) {
        folders.push(file);
      }
    });
    return folders;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7XG4gIEFwcCxcbiAgTW9kYWwsXG4gIE5vdGljZSxcbiAgUGx1Z2luLFxuICBQbHVnaW5TZXR0aW5nVGFiLFxuICBTZXR0aW5nLFxuICBURmlsZSxcbiAgVEZvbGRlcixcbiAgTWV0YWRhdGFDYWNoZSxcbiAgRnJvbnRNYXR0ZXJDYWNoZSxcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmludGVyZmFjZSBQYXJlbnRMaW5rU2V0dGluZ3Mge1xuICBlbmFibGVkOiBib29sZWFuO1xuICBkZXRhaWxlZExvZ3M6IGJvb2xlYW47XG4gIGxhc3RSZWZyZXNoZWRGb2xkZXI/OiBzdHJpbmc7ICAvLyBBZGQgdGhpcyB0byBzdG9yZSBsYXN0IHVzZWQgZm9sZGVyXG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFBhcmVudExpbmtTZXR0aW5ncyA9IHtcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgZGV0YWlsZWRMb2dzOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhcmVudExpbmsgZXh0ZW5kcyBQbHVnaW4ge1xuICBzZXR0aW5nczogUGFyZW50TGlua1NldHRpbmdzO1xuXG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG4gICAgLy8gUmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnMgKHRoZXkgd2lsbCBjaGVjayBzZXR0aW5ncy5lbmFibGVkIGludGVybmFsbHkpXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50cygpO1xuXG4gICAgLy8gQWRkIHNldHRpbmdzIHRhYlxuICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgUGFyZW50TGlua1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJFdmVudHMoKSB7XG4gICAgLy8gTW9uaXRvciBmaWxlIGNyZWF0aW9uXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgdGhpcy5hcHAudmF1bHQub24oXCJjcmVhdGVcIiwgYXN5bmMgKGZpbGUpID0+IHtcbiAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiB0aGlzLnNldHRpbmdzLmVuYWJsZWQpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcmVudExpbmsoZmlsZSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcblxuICAgIC8vIE1vbml0b3IgZmlsZSBtb3Zlcy9yZW5hbWVzXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgdGhpcy5hcHAudmF1bHQub24oXCJyZW5hbWVcIiwgYXN5bmMgKGZpbGUsIG9sZFBhdGgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmVuYWJsZWQpIHJldHVybjtcblxuICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSByZW5hbWVkIGZpbGVcbiAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcmVudExpbmsoZmlsZSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIGZvbGRlciBub3RlLCB1cGRhdGUgYWxsIG5vdGVzIGluIHRoYXQgZm9sZGVyXG4gICAgICAgICAgY29uc3QgaXNGb2xkZXJOb3RlID0gZmlsZS5iYXNlbmFtZSA9PT0gZmlsZS5wYXJlbnQ/Lm5hbWU7XG4gICAgICAgICAgaWYgKGlzRm9sZGVyTm90ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGb2xkZXIgbm90ZSByZW5hbWVkLCB1cGRhdGluZyBjaGlsZCBub3RlcyBpbiAke2ZpbGUucGFyZW50Py5wYXRofWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBHZXQgYWxsIGZpbGVzIGluIHRoZSBmb2xkZXJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKClcbiAgICAgICAgICAgICAgLmZpbHRlcihmID0+IGYucGFyZW50Py5wYXRoID09PSBmaWxlLnBhcmVudD8ucGF0aCAmJiBmICE9PSBmaWxlKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVcGRhdGUgZWFjaCBjaGlsZCBmaWxlXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkRmlsZSBvZiBjaGlsZEZpbGVzKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVcGRhdGluZyBjaGlsZCBub3RlOiAke2NoaWxkRmlsZS5wYXRofWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhjaGlsZEZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmaWxlIGluc3RhbmNlb2YgVEZvbGRlcikge1xuICAgICAgICAgIGF3YWl0IHRoaXMuaGFuZGxlRm9sZGVyUmVuYW1lKGZpbGUpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBNb25pdG9yIGV4dGVybmFsIGNoYW5nZXNcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICB0aGlzLmFwcC52YXVsdC5vbihcIm1vZGlmeVwiLCBhc3luYyAoZmlsZSkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZW5hYmxlZCB8fCAhKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHJldHVybjtcblxuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgZnJvbnRtYXR0ZXJcbiAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgY29uc3QgZnJvbnRtYXR0ZXIgPSBjYWNoZT8uZnJvbnRtYXR0ZXI7XG5cbiAgICAgICAgLy8gT25seSBwcm9jZXNzIGlmIHRoaXMgaXMgYSBmb2xkZXIgbm90ZSBhbmQgdGhlIGZyb250bWF0dGVyIGRvZXNuJ3QgaGF2ZSBhIHBhcmVudCBmaWVsZFxuICAgICAgICAvLyBvciBpZiB0aGUgcGFyZW50IGZpZWxkIGV4aXN0cyBidXQgaXMgZW1wdHkvaW52YWxpZFxuICAgICAgICBjb25zdCBpc0ZvbGRlck5vdGUgPSBmaWxlLmJhc2VuYW1lID09PSBmaWxlLnBhcmVudD8ubmFtZTtcbiAgICAgICAgaWYgKGlzRm9sZGVyTm90ZSAmJiAoIWZyb250bWF0dGVyPy5wYXJlbnQgfHwgZnJvbnRtYXR0ZXIucGFyZW50ID09PSAnJykpIHtcbiAgICAgICAgICAvLyBVcGRhdGUgYWxsIGZpbGVzIGluIHRoZSBmb2xkZXJcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGb2xkZXIgbm90ZSBtb2RpZmllZCBleHRlcm5hbGx5OiAke2ZpbGUucGF0aH0sIHVwZGF0aW5nIGNoaWxkcmVuYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF3YWl0IHRoaXMuaGFuZGxlRm9sZGVyUmVuYW1lKGZpbGUucGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcHJvY2Vzc0FsbEZpbGVzKCkge1xuICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xuICAgICAgY29uc29sZS5sb2coXCJTdGFydGluZyB0byBwcm9jZXNzIGFsbCBmaWxlcy4uLlwiKTtcbiAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgY29uc29sZS5sb2coYEZvdW5kICR7ZmlsZXMubGVuZ3RofSBtYXJrZG93biBmaWxlc2ApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xuICAgICAgICBjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyBmaWxlOiAke2ZpbGUucGF0aH1gKTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhmaWxlKTtcbiAgICB9XG4gICAgbmV3IE5vdGljZShcIlBhcmVudExpbms6IEZpbmlzaGVkIHByb2Nlc3NpbmcgYWxsIGZpbGVzXCIpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlUGFyZW50TGluayhmaWxlOiBURmlsZSkge1xuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgcGFyZW50IGZvbGRlclxuICAgICAgY29uc3QgcGFyZW50Rm9sZGVyID0gZmlsZS5wYXJlbnQ7XG4gICAgICBpZiAoIXBhcmVudEZvbGRlcikge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJHtmaWxlLnBhdGh9IC0gc2tpcHBlZCAobm8gcGFyZW50IGZvbGRlcilgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBwYXJlbnROb3RlOiBURmlsZSB8IG51bGwgPSBudWxsO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgZm9sZGVyIG5vdGUgKG5hbWUgbWF0Y2hlcyBwYXJlbnQgZm9sZGVyIGV4YWN0bHkpXG4gICAgICBjb25zdCBpc0ZvbGRlck5vdGUgPSBmaWxlLmJhc2VuYW1lID09PSBwYXJlbnRGb2xkZXIubmFtZTtcbiAgICAgIFxuICAgICAgLy8gSWYgdGhpcyBpcyBhIGZvbGRlciBub3RlIGJ1dCB0aGUgY2FzZSBkb2Vzbid0IG1hdGNoLCBza2lwIGl0XG4gICAgICBpZiAoZmlsZS5iYXNlbmFtZS50b0xvd2VyQ2FzZSgpID09PSBwYXJlbnRGb2xkZXIubmFtZS50b0xvd2VyQ2FzZSgpICYmICFpc0ZvbGRlck5vdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYCR7ZmlsZS5wYXRofSAtIHNraXBwZWQgKGZvbGRlciBub3RlIG5hbWUgY2FzZSBkb2Vzbid0IG1hdGNoIGZvbGRlciBuYW1lKWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKGlzRm9sZGVyTm90ZSkge1xuICAgICAgICAvLyBGb3IgZm9sZGVyIG5vdGVzLCBsb29rIGZvciBhIG5vdGUgbWF0Y2hpbmcgdGhlIGdyYW5kcGFyZW50IGZvbGRlclxuICAgICAgICBjb25zdCBncmFuZHBhcmVudEZvbGRlciA9IHBhcmVudEZvbGRlci5wYXJlbnQ7XG4gICAgICAgIGlmIChncmFuZHBhcmVudEZvbGRlcikge1xuICAgICAgICAgIC8vIEZpbmQgYSBub3RlIHRoYXQgZXhhY3RseSBtYXRjaGVzIHRoZSBncmFuZHBhcmVudCBmb2xkZXIgbmFtZVxuICAgICAgICAgIHBhcmVudE5vdGUgPSB0aGlzLmFwcC52YXVsdFxuICAgICAgICAgICAgLmdldE1hcmtkb3duRmlsZXMoKVxuICAgICAgICAgICAgLmZpbmQoKGYpID0+IFxuICAgICAgICAgICAgICBmLmJhc2VuYW1lID09PSBncmFuZHBhcmVudEZvbGRlci5uYW1lICYmIFxuICAgICAgICAgICAgICBmLnBhcmVudD8ucGF0aCA9PT0gZ3JhbmRwYXJlbnRGb2xkZXIucGF0aCAmJlxuICAgICAgICAgICAgICBmICE9PSBmaWxlXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3IgcmVndWxhciBub3RlcywgbG9vayBmb3IgYSBub3RlIG1hdGNoaW5nIHRoZSBwYXJlbnQgZm9sZGVyXG4gICAgICAgIC8vIEZpbmQgYSBub3RlIHRoYXQgZXhhY3RseSBtYXRjaGVzIHRoZSBwYXJlbnQgZm9sZGVyIG5hbWVcbiAgICAgICAgcGFyZW50Tm90ZSA9IHRoaXMuYXBwLnZhdWx0XG4gICAgICAgICAgLmdldE1hcmtkb3duRmlsZXMoKVxuICAgICAgICAgIC5maW5kKChmKSA9PiBcbiAgICAgICAgICAgIGYuYmFzZW5hbWUgPT09IHBhcmVudEZvbGRlci5uYW1lICYmIFxuICAgICAgICAgICAgZi5wYXJlbnQ/LnBhdGggPT09IHBhcmVudEZvbGRlci5wYXRoICYmXG4gICAgICAgICAgICBmICE9PSBmaWxlXG4gICAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXJlbnROb3RlKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldEZvbGRlciA9IGlzRm9sZGVyTm90ZSA/IHBhcmVudEZvbGRlci5wYXJlbnQ/Lm5hbWUgOiBwYXJlbnRGb2xkZXIubmFtZTtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYCR7ZmlsZS5wYXRofSAtIHNraXBwZWQgKG5vIG1hdGNoaW5nIHBhcmVudCBub3RlIGZvciBmb2xkZXIgJHt0YXJnZXRGb2xkZXJ9KWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGZyb250bWF0dGVyXG4gICAgICBjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgY29uc3QgY3VycmVudFBhcmVudCA9IGNhY2hlPy5mcm9udG1hdHRlcj8ucGFyZW50O1xuXG4gICAgICAvLyBPbmx5IHVwZGF0ZSBpZiB0aGUgcGFyZW50IGZpZWxkIGRvZXNuJ3QgZXhpc3Qgb3IgaXMgZGlmZmVyZW50XG4gICAgICBjb25zdCBuZXdQYXJlbnQgPSBcIltbXCIgKyBwYXJlbnROb3RlLm5hbWUucmVwbGFjZSgnLm1kJywgJycpICsgXCJdXVwiO1xuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQgIT09IG5ld1BhcmVudCkge1xuICAgICAgICBhd2FpdCB0aGlzLmFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoZmlsZSwgKGZyb250bWF0dGVyKSA9PiB7XG4gICAgICAgICAgZnJvbnRtYXR0ZXIucGFyZW50ID0gbmV3UGFyZW50O1xuICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCR7ZmlsZS5wYXRofSAtIGZyb250bWF0dGVyIHVwZGF0ZWQgd2l0aCBwYXJlbnQ6ICR7bmV3UGFyZW50fWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGUucGF0aH0gLSBza2lwcGVkIChwYXJlbnQgYWxyZWFkeSBzZXQgY29ycmVjdGx5KWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGAke2ZpbGUucGF0aH0gLSBlcnJvciB1cGRhdGluZyBwYXJlbnQgbGluazpgLCBlcnJvcik7XG4gICAgICBuZXcgTm90aWNlKGBFcnJvciB1cGRhdGluZyBwYXJlbnQgbGluayBmb3IgJHtmaWxlLnBhdGh9YCk7XG4gICAgfVxuICB9XG5cbiAgb251bmxvYWQoKSB7XG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInVubG9hZGluZyBwbHVnaW5cIik7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICB9XG5cbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gIH1cblxuICBhc3luYyBoYW5kbGVGb2xkZXJSZW5hbWUoZm9sZGVyOiBURm9sZGVyKSB7XG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XG4gICAgICBjb25zb2xlLmxvZyhgRm9sZGVyIHJlbmFtZWQvbW9kaWZpZWQ6ICR7Zm9sZGVyLnBhdGh9LCB1cGRhdGluZyBhbGwgZmlsZXMgaW5zaWRlYCk7XG4gICAgfVxuXG4gICAgLy8gR2V0IGFsbCBtYXJrZG93biBmaWxlcyBpbiB0aGlzIGZvbGRlciBhbmQgc3ViZm9sZGVyc1xuICAgIGNvbnN0IGZpbGVzSW5Gb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKClcbiAgICAgICAgLmZpbHRlcihmID0+IHtcbiAgICAgICAgICAvLyBGb3Igcm9vdCBmb2xkZXIsIHByb2Nlc3MgYWxsIGZpbGVzXG4gICAgICAgICAgaWYgKGZvbGRlci5pc1Jvb3QoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEZvciBvdGhlciBmb2xkZXJzLCBvbmx5IHByb2Nlc3MgZmlsZXMgaW4gdGhhdCBmb2xkZXJcbiAgICAgICAgICByZXR1cm4gZi5wYXRoLnN0YXJ0c1dpdGgoZm9sZGVyLnBhdGggKyAnLycpO1xuICAgICAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBlYWNoIGZpbGVcbiAgICBmb3IgKGNvbnN0IGNoaWxkRmlsZSBvZiBmaWxlc0luRm9sZGVyKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhjaGlsZEZpbGUpO1xuICAgIH1cblxuICAgIC8vIEFsc28gdXBkYXRlIHRoZSBmb2xkZXIgbm90ZSBpZiBpdCBleGlzdHMgKHNraXAgZm9yIHJvb3QgZm9sZGVyKVxuICAgIGlmICghZm9sZGVyLmlzUm9vdCgpKSB7XG4gICAgICAgIGNvbnN0IGZvbGRlck5vdGUgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKClcbiAgICAgICAgICAgIC5maW5kKGYgPT4gZi5iYXNlbmFtZSA9PT0gZm9sZGVyLm5hbWUgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgZi5wYXJlbnQ/LnBhdGggPT09IGZvbGRlci5wYXRoKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChmb2xkZXJOb3RlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXBkYXRpbmcgZm9sZGVyIG5vdGU6ICR7Zm9sZGVyTm90ZS5wYXRofWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQYXJlbnRMaW5rKGZvbGRlck5vdGUpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIFBhcmVudExpbmtTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gIHBsdWdpbjogUGFyZW50TGluaztcbiAgcHJpdmF0ZSBmb2xkZXJJbnB1dEVsOiBIVE1MSW5wdXRFbGVtZW50O1xuICBwcml2YXRlIHN1Z2dlc3Rpb25Db250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFBhcmVudExpbmspIHtcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblxuICBkaXNwbGF5KCk6IHZvaWQge1xuICAgIGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzO1xuICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMlwiLCB7dGV4dDogXCJQYXJlbnQgTGluayBTZXR0aW5nc1wifSk7XG5cbiAgICAvLyBGaXJzdCBzZXR0aW5nXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZShcIkVuYWJsZSBhdXRvbWF0aWMgcGFyZW50IGxpbmtpbmdcIilcbiAgICAgIC5zZXREZXNjKFwiQXV0b21hdGljYWxseSBhZGQgcGFyZW50IGxpbmtzIHRvIGZpbGVzIHdoZW4gdGhleSBhcmUgY3JlYXRlZCBvciBtb3ZlZFwiKVxuICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVkKVxuICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlZCA9IHZhbHVlO1xuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICh2YWx1ZSAmJiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGFyZW50TGluayBwbHVnaW4gZW5hYmxlZFwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcblxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiYnJcIik7XG5cbiAgICAvLyBTZWNvbmQgc2V0dGluZ1xuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoXCJFbmFibGUgZGV0YWlsZWQgbG9nc1wiKVxuICAgICAgLnNldERlc2MoXCJTaG93IGFkZGl0aW9uYWwgcHJvY2Vzc2luZyBkZXRhaWxzIGluIHRoZSBjb25zb2xlXCIpXG4gICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRldGFpbGVkTG9ncylcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRldGFpbGVkTG9ncyA9IHZhbHVlO1xuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICB9KSk7XG5cbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImJyXCIpO1xuXG4gICAgLy8gRm9sZGVyIHJlZnJlc2ggc2V0dGluZ1xuICAgIGNvbnN0IGZvbGRlclNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKFwiUmVmcmVzaCBmb2xkZXIgcGFyZW50c1wiKVxuICAgICAgLnNldERlc2MoXCJUeXBlIGZvbGRlciBwYXRoIHRvIHJlZnJlc2ggcGFyZW50IGxpbmtzIGZvciBhbGwgZmlsZXMgaW4gdGhhdCBmb2xkZXJcIik7XG5cbiAgICAvLyBDcmVhdGUgY29udGFpbmVyIGZvciB0aGUgaW5wdXQgYW5kIHN1Z2dlc3Rpb25zXG4gICAgY29uc3QgaW5wdXRDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6IFwicGFyZW50LWxpbmstaW5wdXQtY29udGFpbmVyXCIgfSk7XG4gICAgdGhpcy5mb2xkZXJJbnB1dEVsID0gaW5wdXRDb250YWluZXIuY3JlYXRlRWwoXCJpbnB1dFwiLCB7XG4gICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgIHZhbHVlOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXN0UmVmcmVzaGVkRm9sZGVyIHx8IFwiXCIsXG4gICAgICBwbGFjZWhvbGRlcjogXCJUeXBlIGZvbGRlciBwYXRoLi4uXCJcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBzdWdnZXN0aW9ucyBjb250YWluZXJcbiAgICB0aGlzLnN1Z2dlc3Rpb25Db250YWluZXIgPSBpbnB1dENvbnRhaW5lci5jcmVhdGVEaXYoeyBcbiAgICAgIGNsczogXCJwYXJlbnQtbGluay1zdWdnZXN0aW9uLWNvbnRhaW5lclwiIFxuICAgIH0pO1xuICAgIHRoaXMuc3VnZ2VzdGlvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICAvLyBBZGQgcmVmcmVzaCBidXR0b25cbiAgICBmb2xkZXJTZXR0aW5nLmFkZEJ1dHRvbihidXR0b24gPT4gYnV0dG9uXG4gICAgICAuc2V0QnV0dG9uVGV4dChcIlJlZnJlc2hcIilcbiAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZm9sZGVyUGF0aCA9IHRoaXMuZm9sZGVySW5wdXRFbC52YWx1ZTtcbiAgICAgICAgLy8gSGFuZGxlIHJvb3QgcGF0aCBzcGVjaWFsbHlcbiAgICAgICAgaWYgKGZvbGRlclBhdGggPT09IFwiL1wiIHx8IGZvbGRlclBhdGggPT09IFwiXCIpIHtcbiAgICAgICAgICAvLyBHZXQgdGhlIHJvb3QgZm9sZGVyXG4gICAgICAgICAgY29uc3Qgcm9vdEZvbGRlciA9IHRoaXMuYXBwLnZhdWx0LmdldFJvb3QoKTtcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXN0UmVmcmVzaGVkRm9sZGVyID0gXCIvXCI7XG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uaGFuZGxlRm9sZGVyUmVuYW1lKHJvb3RGb2xkZXIpO1xuICAgICAgICAgIG5ldyBOb3RpY2UoYFVwZGF0ZWQgcGFyZW50IGxpbmtzIGluIHRoZSBlbnRpcmUgdmF1bHRgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBmb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZm9sZGVyUGF0aCk7XG4gICAgICAgICAgaWYgKGZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmxhc3RSZWZyZXNoZWRGb2xkZXIgPSBmb2xkZXJQYXRoO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5oYW5kbGVGb2xkZXJSZW5hbWUoZm9sZGVyKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFVwZGF0ZWQgcGFyZW50IGxpbmtzIGluICR7Zm9sZGVyUGF0aH1gKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGZvbGRlciBwYXRoXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkpO1xuXG4gICAgLy8gQWRkIGlucHV0IGhhbmRsZXIgZm9yIGF1dG9jb21wbGV0ZVxuICAgIHRoaXMuZm9sZGVySW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhpcy51cGRhdGVTdWdnZXN0aW9ucy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmZvbGRlcklucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMudXBkYXRlU3VnZ2VzdGlvbnMuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5mb2xkZXJJbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsICgpID0+IHtcbiAgICAgIC8vIERlbGF5IGhpZGluZyBzdWdnZXN0aW9ucyB0byBhbGxvdyBmb3IgY2xpY2tzXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zdWdnZXN0aW9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIH0sIDIwMCk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgc3R5bGVzXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJzdHlsZVwiLCB7XG4gICAgICB0ZXh0OiBgXG4gICAgICAgIC5wYXJlbnQtbGluay1pbnB1dC1jb250YWluZXIge1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xuICAgICAgICB9XG4gICAgICAgIC5wYXJlbnQtbGluay1pbnB1dC1jb250YWluZXIgaW5wdXQge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmc6IDZweDtcbiAgICAgICAgfVxuICAgICAgICAucGFyZW50LWxpbmstc3VnZ2VzdGlvbi1jb250YWluZXIge1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBtYXgtaGVpZ2h0OiAyMDBweDtcbiAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgIHotaW5kZXg6IDEwMDtcbiAgICAgICAgfVxuICAgICAgICAucGFyZW50LWxpbmstc3VnZ2VzdGlvbiB7XG4gICAgICAgICAgcGFkZGluZzogNnB4O1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgfVxuICAgICAgICAucGFyZW50LWxpbmstc3VnZ2VzdGlvbjpob3ZlciB7XG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ob3Zlcik7XG4gICAgICAgIH1cbiAgICAgIGBcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVN1Z2dlc3Rpb25zKCkge1xuICAgIGNvbnN0IGlucHV0ID0gdGhpcy5mb2xkZXJJbnB1dEVsLnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgZm9sZGVycyA9IHRoaXMuZ2V0QWxsRm9sZGVycygpO1xuICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gZm9sZGVycy5maWx0ZXIoZiA9PiBcbiAgICAgIGYucGF0aC50b0xvd2VyQ2FzZSgpLmNvbnRhaW5zKGlucHV0KVxuICAgICk7XG5cbiAgICB0aGlzLnN1Z2dlc3Rpb25Db250YWluZXIuZW1wdHkoKTtcbiAgICBcbiAgICBpZiAoc3VnZ2VzdGlvbnMubGVuZ3RoID4gMCAmJiBpbnB1dCkge1xuICAgICAgdGhpcy5zdWdnZXN0aW9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBzdWdnZXN0aW9ucy5mb3JFYWNoKGZvbGRlciA9PiB7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25FbCA9IHRoaXMuc3VnZ2VzdGlvbkNvbnRhaW5lci5jcmVhdGVEaXYoe1xuICAgICAgICAgIGNsczogXCJwYXJlbnQtbGluay1zdWdnZXN0aW9uXCIsXG4gICAgICAgICAgdGV4dDogZm9sZGVyLnBhdGhcbiAgICAgICAgfSk7XG4gICAgICAgIHN1Z2dlc3Rpb25FbC5vbm1vdXNlZG93biA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmZvbGRlcklucHV0RWwudmFsdWUgPSBmb2xkZXIucGF0aDtcbiAgICAgICAgICB0aGlzLnN1Z2dlc3Rpb25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3VnZ2VzdGlvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfVxuICB9XG5cbiAgZ2V0QWxsRm9sZGVycygpOiBURm9sZGVyW10ge1xuICAgIGNvbnN0IGZvbGRlcnM6IFRGb2xkZXJbXSA9IFtdO1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0QWxsTG9hZGVkRmlsZXMoKTtcbiAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURm9sZGVyKSB7XG4gICAgICAgIGZvbGRlcnMucHVzaChmaWxlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZm9sZGVycztcbiAgfVxufVxuIl0s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
