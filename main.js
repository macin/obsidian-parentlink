/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ParentLink
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enabled: true,
  detailedLogs: false,
  allowedPaths: []
  // Default to empty array (all paths allowed)
};
var ParentLink = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEvents();
    this.addSettingTab(new ParentLinkSettingTab(this.app, this));
  }
  registerEvents() {
    this.registerEvent(
      this.app.vault.on("create", async (file) => {
        if (file instanceof import_obsidian.TFile && this.settings.enabled) {
          await this.updateParentLink(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", async (file, oldPath) => {
        var _a, _b;
        if (!this.settings.enabled)
          return;
        if (file instanceof import_obsidian.TFile) {
          await this.updateParentLink(file);
          const isFolderNote = file.basename === ((_a = file.parent) == null ? void 0 : _a.name);
          if (isFolderNote) {
            if (this.settings.detailedLogs) {
              console.log(`Folder note renamed, updating child notes in ${(_b = file.parent) == null ? void 0 : _b.path}`);
            }
            const childFiles = this.app.vault.getMarkdownFiles().filter((f) => {
              var _a2, _b2;
              return ((_a2 = f.parent) == null ? void 0 : _a2.path) === ((_b2 = file.parent) == null ? void 0 : _b2.path) && f !== file;
            });
            for (const childFile of childFiles) {
              if (this.settings.detailedLogs) {
                console.log(`Updating child note: ${childFile.path}`);
              }
              await this.updateParentLink(childFile);
            }
          }
        } else if (file instanceof import_obsidian.TFolder) {
          await this.handleFolderRename(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", async (file) => {
        var _a;
        if (!this.settings.enabled || !(file instanceof import_obsidian.TFile))
          return;
        const cache = this.app.metadataCache.getFileCache(file);
        const frontmatter = cache == null ? void 0 : cache.frontmatter;
        const isFolderNote = file.basename === ((_a = file.parent) == null ? void 0 : _a.name);
        if (isFolderNote && (!(frontmatter == null ? void 0 : frontmatter.parent) || frontmatter.parent === "") && file.parent) {
          if (this.settings.detailedLogs) {
            console.log(`Folder note modified externally: ${file.path}, updating children`);
          }
          await this.handleFolderRename(file.parent);
        }
      })
    );
  }
  async processAllFiles() {
    if (this.settings.detailedLogs) {
      console.log("Starting to process all files...");
      const files2 = this.app.vault.getMarkdownFiles();
      console.log(`Found ${files2.length} markdown files`);
    }
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      if (this.settings.detailedLogs) {
        console.log(`Processing file: ${file.path}`);
      }
      await this.updateParentLink(file);
    }
    new import_obsidian.Notice("ParentLink: Finished processing all files");
  }
  async updateParentLink(file) {
    var _a, _b;
    try {
      if (this.settings.allowedPaths.length > 0) {
        const isAllowed = this.settings.allowedPaths.some(
          (allowedPath) => {
            var _a2;
            return file.path.startsWith(allowedPath) || // Also check parent folder for folder notes
            (((_a2 = file.parent) == null ? void 0 : _a2.path) || "").startsWith(allowedPath);
          }
        );
        if (!isAllowed) {
          if (this.settings.detailedLogs) {
            console.log(`${file.path} - skipped (not in allowed paths)`);
          }
          return;
        }
      }
      const parentFolder = file.parent;
      if (!parentFolder) {
        if (this.settings.detailedLogs) {
          console.log(`${file.path} - skipped (no parent folder)`);
        }
        return;
      }
      let parentNote = null;
      const isFolderNote = file.basename === parentFolder.name;
      if (file.basename.toLowerCase() === parentFolder.name.toLowerCase() && !isFolderNote) {
        if (this.settings.detailedLogs) {
          console.log(`${file.path} - skipped (folder note name case doesn't match folder name)`);
        }
        return;
      }
      if (isFolderNote) {
        const grandparentFolder = parentFolder.parent;
        if (grandparentFolder) {
          parentNote = this.app.vault.getMarkdownFiles().find(
            (f) => {
              var _a2;
              return f.basename === grandparentFolder.name && ((_a2 = f.parent) == null ? void 0 : _a2.path) === grandparentFolder.path && f !== file;
            }
          ) || null;
        }
      } else {
        parentNote = this.app.vault.getMarkdownFiles().find(
          (f) => {
            var _a2;
            return f.basename === parentFolder.name && ((_a2 = f.parent) == null ? void 0 : _a2.path) === parentFolder.path && f !== file;
          }
        ) || null;
      }
      if (!parentNote) {
        const targetFolder = isFolderNote ? (_a = parentFolder.parent) == null ? void 0 : _a.name : parentFolder.name;
        if (this.settings.detailedLogs) {
          console.log(`${file.path} - skipped (no matching parent note for folder ${targetFolder})`);
        }
        return;
      }
      const cache = this.app.metadataCache.getFileCache(file);
      const currentParent = (_b = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _b.parent;
      const newParent = "[[" + parentNote.name.replace(".md", "") + "]]";
      if (currentParent !== newParent) {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          frontmatter.parent = newParent;
          if (this.settings.detailedLogs) {
            console.log(`${file.path} - frontmatter updated with parent: ${newParent}`);
          }
        });
      } else if (this.settings.detailedLogs) {
        console.log(`${file.path} - skipped (parent already set correctly)`);
      }
    } catch (error) {
      console.error(`${file.path} - error updating parent link:`, error);
      new import_obsidian.Notice(`Error updating parent link for ${file.path}`);
    }
  }
  onunload() {
    if (this.settings.detailedLogs) {
      console.log("unloading plugin");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async handleFolderRename(folder) {
    if (this.settings.detailedLogs) {
      console.log(`Folder renamed/modified: ${folder.path}, updating all files inside`);
    }
    const filesInFolder = this.app.vault.getMarkdownFiles().filter((f) => {
      if (folder.isRoot()) {
        return true;
      }
      return f.path.startsWith(folder.path + "/");
    });
    for (const childFile of filesInFolder) {
      await this.updateParentLink(childFile);
    }
    if (!folder.isRoot()) {
      const folderNote = this.app.vault.getMarkdownFiles().find((f) => {
        var _a;
        return f.basename === folder.name && ((_a = f.parent) == null ? void 0 : _a.path) === folder.path;
      });
      if (folderNote) {
        if (this.settings.detailedLogs) {
          console.log(`Updating folder note: ${folderNote.path}`);
        }
        await this.updateParentLink(folderNote);
      }
    }
  }
};
var ParentLinkSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Parent Link Settings" });
    this.addBasicSettings(containerEl);
    this.addFolderRefreshSetting(containerEl);
    containerEl.createEl("h3", { text: "Allowed Paths" });
    containerEl.createEl("p", {
      text: "Specify paths where the plugin should work. Leave empty to allow all paths.",
      cls: "setting-item-description"
    });
    this.allowedPathsContainer = containerEl.createDiv({ cls: "parent-link-allowed-paths" });
    const addButton = new import_obsidian.Setting(containerEl).addButton((button) => button.setButtonText("Add Path").setClass("mod-setting-button").onClick(() => {
      this.addAllowedPathInput();
    }));
    if (this.plugin.settings.allowedPaths.length === 0) {
      this.addAllowedPathInput();
    } else {
      this.plugin.settings.allowedPaths.forEach((path) => {
        this.addAllowedPathInput(path);
      });
    }
    containerEl.createEl("style", {
      text: `
        .parent-link-input-container {
          position: relative;
          flex: 1;
        }
        .parent-link-input-container input {
          width: 100%;
          padding: 6px 12px;
          height: var(--input-height);
          background: var(--background-modifier-form-field);
          border: var(--input-border-width) solid var(--background-modifier-border);
          color: var(--text-normal);
          border-radius: var(--radius-s);
          font-size: var(--font-ui-small);
        }
        .parent-link-suggestion-container {
          position: absolute;
          width: 100%;
          max-height: 200px;
          overflow-y: auto;
          background: var(--background-primary);
          border: 1px solid var(--background-modifier-border);
          z-index: 100;
          border-radius: var(--radius-s);
          box-shadow: var(--shadow-s);
          margin-top: 4px;
        }
        .parent-link-suggestion {
          padding: 8px 12px;
          cursor: pointer;
          font-size: var(--font-ui-small);
        }
        .parent-link-suggestion:hover,
        .parent-link-suggestion.is-selected {
          background: var(--background-modifier-hover);
          color: var(--text-accent);
        }
        .parent-link-allowed-path {
          display: flex;
          align-items: center;
          gap: 8px;
          margin-bottom: 8px;
          width: 100%;
          padding: 0 20px;
        }
        .parent-link-remove-button {
          padding: 0;
          background: var(--background-modifier-error);
          border: none;
          color: var(--text-on-accent);
          border-radius: var(--radius-s);
          cursor: pointer;
          height: var(--input-height);
          width: var(--input-height);
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 18px;
        }
        .parent-link-remove-button:hover {
          background: var(--background-modifier-error-hover);
        }
        .parent-link-allowed-paths {
          width: 100%;
          margin-bottom: 12px;
        }
        .setting-item.mod-setting-button {
          padding-left: 20px;
          padding-right: 20px;
        }
      `
    });
  }
  addBasicSettings(containerEl) {
    new import_obsidian.Setting(containerEl).setName("Enable automatic parent linking").setDesc("Automatically add parent links to files when they are created or moved").addToggle((toggle) => toggle.setValue(this.plugin.settings.enabled).onChange(async (value) => {
      this.plugin.settings.enabled = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Enable detailed logs").setDesc("Show additional processing details in the console").addToggle((toggle) => toggle.setValue(this.plugin.settings.detailedLogs).onChange(async (value) => {
      this.plugin.settings.detailedLogs = value;
      await this.plugin.saveSettings();
    }));
  }
  addAllowedPathInput(initialValue = "") {
    const container = this.allowedPathsContainer.createDiv({ cls: "parent-link-allowed-path" });
    const inputContainer = container.createDiv({ cls: "parent-link-input-container" });
    const input = inputContainer.createEl("input", {
      type: "text",
      value: initialValue,
      placeholder: "Type folder path..."
    });
    const suggestionContainer = inputContainer.createDiv({
      cls: "parent-link-suggestion-container"
    });
    suggestionContainer.style.display = "none";
    const removeButton = container.createEl("button", {
      text: "\xD7",
      title: "Remove path",
      cls: "parent-link-remove-button"
    });
    removeButton.onclick = () => {
      container.remove();
      this.saveAllowedPaths();
    };
    let selectedIndex = -1;
    const handleKeydown = (event) => {
      const suggestions = suggestionContainer.children;
      if (suggestions.length === 0)
        return;
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        event.preventDefault();
        if (event.key === "ArrowDown") {
          selectedIndex = (selectedIndex + 1) % suggestions.length;
        } else {
          selectedIndex = selectedIndex <= 0 ? suggestions.length - 1 : selectedIndex - 1;
        }
        Array.from(suggestions).forEach((el, i) => {
          el.classList.toggle("is-selected", i === selectedIndex);
        });
      } else if (event.key === "Enter" && selectedIndex >= 0) {
        event.preventDefault();
        const selectedSuggestion = suggestions[selectedIndex];
        input.value = selectedSuggestion.textContent || "";
        suggestionContainer.style.display = "none";
        selectedIndex = -1;
        this.saveAllowedPaths();
      } else if (event.key === "Escape") {
        suggestionContainer.style.display = "none";
        selectedIndex = -1;
      }
    };
    input.addEventListener("input", () => {
      selectedIndex = -1;
      this.updatePathSuggestions(input, suggestionContainer);
      this.saveAllowedPaths();
    });
    input.addEventListener("focus", () => {
      this.updatePathSuggestions(input, suggestionContainer);
    });
    input.addEventListener("blur", () => {
      setTimeout(() => {
        suggestionContainer.style.display = "none";
        selectedIndex = -1;
      }, 200);
    });
    input.addEventListener("keydown", handleKeydown);
  }
  updatePathSuggestions(input, suggestionContainer) {
    const inputValue = input.value.toLowerCase();
    const folders = this.getAllFolders();
    const suggestions = folders.filter(
      (f) => f.path.toLowerCase().contains(inputValue)
    );
    suggestionContainer.empty();
    if (suggestions.length > 0 && inputValue) {
      suggestionContainer.style.display = "block";
      suggestions.forEach((folder) => {
        const suggestionEl = suggestionContainer.createDiv({
          cls: "parent-link-suggestion",
          text: folder.path
        });
        suggestionEl.onmousedown = () => {
          input.value = folder.path;
          suggestionContainer.style.display = "none";
          this.saveAllowedPaths();
        };
      });
    } else {
      suggestionContainer.style.display = "none";
    }
  }
  saveAllowedPaths() {
    const inputs = this.allowedPathsContainer.querySelectorAll("input");
    const paths = Array.from(inputs).map((input) => input.value.trim()).filter((path) => path.length > 0);
    this.plugin.settings.allowedPaths = paths;
    this.plugin.saveSettings();
  }
  getAllFolders() {
    const folders = [];
    const files = this.app.vault.getAllLoadedFiles();
    files.forEach((file) => {
      if (file instanceof import_obsidian.TFolder) {
        folders.push(file);
      }
    });
    return folders;
  }
  addFolderRefreshSetting(containerEl) {
    const folderSetting = new import_obsidian.Setting(containerEl).setName("Refresh folder parents").setDesc("Type folder path to refresh parent links for all files in that folder");
    const inputContainer = containerEl.createDiv({ cls: "parent-link-input-container" });
    this.folderInputEl = inputContainer.createEl("input", {
      type: "text",
      value: this.plugin.settings.lastRefreshedFolder || "",
      placeholder: "Type folder path..."
    });
    this.suggestionContainer = inputContainer.createDiv({
      cls: "parent-link-suggestion-container"
    });
    this.suggestionContainer.style.display = "none";
    folderSetting.addButton((button) => button.setButtonText("Refresh").onClick(async () => {
      const folderPath = this.folderInputEl.value;
      if (folderPath === "/" || folderPath === "") {
        const rootFolder = this.app.vault.getRoot();
        this.plugin.settings.lastRefreshedFolder = "/";
        await this.plugin.saveSettings();
        await this.plugin.handleFolderRename(rootFolder);
        new import_obsidian.Notice(`Updated parent links in the entire vault`);
      } else {
        const folder = this.app.vault.getAbstractFileByPath(folderPath);
        if (folder instanceof import_obsidian.TFolder) {
          this.plugin.settings.lastRefreshedFolder = folderPath;
          await this.plugin.saveSettings();
          await this.plugin.handleFolderRename(folder);
          new import_obsidian.Notice(`Updated parent links in ${folderPath}`);
        } else {
          new import_obsidian.Notice("Please enter a valid folder path");
        }
      }
    }));
    this.folderInputEl.addEventListener("input", () => {
      this.updatePathSuggestions(this.folderInputEl, this.suggestionContainer);
    });
    this.folderInputEl.addEventListener("focus", () => {
      this.updatePathSuggestions(this.folderInputEl, this.suggestionContainer);
    });
    this.folderInputEl.addEventListener("blur", () => {
      setTimeout(() => {
        this.suggestionContainer.style.display = "none";
      }, 200);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7XHJcbiAgQXBwLFxyXG4gIE1vZGFsLFxyXG4gIE5vdGljZSxcclxuICBQbHVnaW4sXHJcbiAgUGx1Z2luU2V0dGluZ1RhYixcclxuICBTZXR0aW5nLFxyXG4gIFRGaWxlLFxyXG4gIFRGb2xkZXIsXHJcbiAgTWV0YWRhdGFDYWNoZSxcclxuICBGcm9udE1hdHRlckNhY2hlLFxyXG59IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuaW50ZXJmYWNlIFBhcmVudExpbmtTZXR0aW5ncyB7XHJcbiAgZW5hYmxlZDogYm9vbGVhbjtcclxuICBkZXRhaWxlZExvZ3M6IGJvb2xlYW47XHJcbiAgbGFzdFJlZnJlc2hlZEZvbGRlcj86IHN0cmluZzsgIC8vIEFkZCB0aGlzIHRvIHN0b3JlIGxhc3QgdXNlZCBmb2xkZXJcclxuICBhbGxvd2VkUGF0aHM6IHN0cmluZ1tdOyAgLy8gQWRkIHRoaXMgZm9yIHBhdGggZmlsdGVyaW5nXHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFBhcmVudExpbmtTZXR0aW5ncyA9IHtcclxuICBlbmFibGVkOiB0cnVlLFxyXG4gIGRldGFpbGVkTG9nczogZmFsc2UsXHJcbiAgYWxsb3dlZFBhdGhzOiBbXSwgIC8vIERlZmF1bHQgdG8gZW1wdHkgYXJyYXkgKGFsbCBwYXRocyBhbGxvd2VkKVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyZW50TGluayBleHRlbmRzIFBsdWdpbiB7XHJcbiAgc2V0dGluZ3M6IFBhcmVudExpbmtTZXR0aW5ncztcclxuXHJcbiAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcbiAgICAvLyBSZWdpc3RlciBldmVudCBoYW5kbGVycyAodGhleSB3aWxsIGNoZWNrIHNldHRpbmdzLmVuYWJsZWQgaW50ZXJuYWxseSlcclxuICAgIHRoaXMucmVnaXN0ZXJFdmVudHMoKTtcclxuXHJcbiAgICAvLyBBZGQgc2V0dGluZ3MgdGFiXHJcbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IFBhcmVudExpbmtTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlZ2lzdGVyRXZlbnRzKCkge1xyXG4gICAgLy8gTW9uaXRvciBmaWxlIGNyZWF0aW9uXHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcbiAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKFwiY3JlYXRlXCIsIGFzeW5jIChmaWxlKSA9PiB7XHJcbiAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiB0aGlzLnNldHRpbmdzLmVuYWJsZWQpIHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhmaWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIE1vbml0b3IgZmlsZSBtb3Zlcy9yZW5hbWVzXHJcbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcbiAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKFwicmVuYW1lXCIsIGFzeW5jIChmaWxlLCBvbGRQYXRoKSA9PiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmVuYWJsZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSByZW5hbWVkIGZpbGVcclxuICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhmaWxlKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIGZvbGRlciBub3RlLCB1cGRhdGUgYWxsIG5vdGVzIGluIHRoYXQgZm9sZGVyXHJcbiAgICAgICAgICBjb25zdCBpc0ZvbGRlck5vdGUgPSBmaWxlLmJhc2VuYW1lID09PSBmaWxlLnBhcmVudD8ubmFtZTtcclxuICAgICAgICAgIGlmIChpc0ZvbGRlck5vdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYEZvbGRlciBub3RlIHJlbmFtZWQsIHVwZGF0aW5nIGNoaWxkIG5vdGVzIGluICR7ZmlsZS5wYXJlbnQ/LnBhdGh9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEdldCBhbGwgZmlsZXMgaW4gdGhlIGZvbGRlclxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZEZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpXHJcbiAgICAgICAgICAgICAgLmZpbHRlcihmID0+IGYucGFyZW50Py5wYXRoID09PSBmaWxlLnBhcmVudD8ucGF0aCAmJiBmICE9PSBmaWxlKTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gVXBkYXRlIGVhY2ggY2hpbGQgZmlsZVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkRmlsZSBvZiBjaGlsZEZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXBkYXRpbmcgY2hpbGQgbm90ZTogJHtjaGlsZEZpbGUucGF0aH1gKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQYXJlbnRMaW5rKGNoaWxkRmlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGZpbGUgaW5zdGFuY2VvZiBURm9sZGVyKSB7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZUZvbGRlclJlbmFtZShmaWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIE1vbml0b3IgZXh0ZXJuYWwgY2hhbmdlc1xyXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxyXG4gICAgICB0aGlzLmFwcC52YXVsdC5vbihcIm1vZGlmeVwiLCBhc3luYyAoZmlsZSkgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5lbmFibGVkIHx8ICEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgZnJvbnRtYXR0ZXJcclxuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG4gICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gY2FjaGU/LmZyb250bWF0dGVyO1xyXG5cclxuICAgICAgICAvLyBPbmx5IHByb2Nlc3MgaWYgdGhpcyBpcyBhIGZvbGRlciBub3RlIGFuZCB0aGUgZnJvbnRtYXR0ZXIgZG9lc24ndCBoYXZlIGEgcGFyZW50IGZpZWxkXHJcbiAgICAgICAgLy8gb3IgaWYgdGhlIHBhcmVudCBmaWVsZCBleGlzdHMgYnV0IGlzIGVtcHR5L2ludmFsaWRcclxuICAgICAgICBjb25zdCBpc0ZvbGRlck5vdGUgPSBmaWxlLmJhc2VuYW1lID09PSBmaWxlLnBhcmVudD8ubmFtZTtcclxuICAgICAgICBpZiAoaXNGb2xkZXJOb3RlICYmICghZnJvbnRtYXR0ZXI/LnBhcmVudCB8fCBmcm9udG1hdHRlci5wYXJlbnQgPT09ICcnKSAmJiBmaWxlLnBhcmVudCkge1xyXG4gICAgICAgICAgLy8gVXBkYXRlIGFsbCBmaWxlcyBpbiB0aGUgZm9sZGVyXHJcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYEZvbGRlciBub3RlIG1vZGlmaWVkIGV4dGVybmFsbHk6ICR7ZmlsZS5wYXRofSwgdXBkYXRpbmcgY2hpbGRyZW5gKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGF3YWl0IHRoaXMuaGFuZGxlRm9sZGVyUmVuYW1lKGZpbGUucGFyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcHJvY2Vzc0FsbEZpbGVzKCkge1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiU3RhcnRpbmcgdG8gcHJvY2VzcyBhbGwgZmlsZXMuLi5cIik7XHJcbiAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgRm91bmQgJHtmaWxlcy5sZW5ndGh9IG1hcmtkb3duIGZpbGVzYCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nIGZpbGU6ICR7ZmlsZS5wYXRofWApO1xyXG4gICAgICB9XHJcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhmaWxlKTtcclxuICAgIH1cclxuICAgIG5ldyBOb3RpY2UoXCJQYXJlbnRMaW5rOiBGaW5pc2hlZCBwcm9jZXNzaW5nIGFsbCBmaWxlc1wiKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZVBhcmVudExpbmsoZmlsZTogVEZpbGUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENoZWNrIGlmIHBhdGggaXMgYWxsb3dlZFxyXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGxvd2VkUGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGlzQWxsb3dlZCA9IHRoaXMuc2V0dGluZ3MuYWxsb3dlZFBhdGhzLnNvbWUoYWxsb3dlZFBhdGggPT4gXHJcbiAgICAgICAgICBmaWxlLnBhdGguc3RhcnRzV2l0aChhbGxvd2VkUGF0aCkgfHwgXHJcbiAgICAgICAgICAvLyBBbHNvIGNoZWNrIHBhcmVudCBmb2xkZXIgZm9yIGZvbGRlciBub3Rlc1xyXG4gICAgICAgICAgKGZpbGUucGFyZW50Py5wYXRoIHx8ICcnKS5zdGFydHNXaXRoKGFsbG93ZWRQYXRoKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFpc0FsbG93ZWQpIHtcclxuICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtmaWxlLnBhdGh9IC0gc2tpcHBlZCAobm90IGluIGFsbG93ZWQgcGF0aHMpYCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBHZXQgcGFyZW50IGZvbGRlclxyXG4gICAgICBjb25zdCBwYXJlbnRGb2xkZXIgPSBmaWxlLnBhcmVudDtcclxuICAgICAgaWYgKCFwYXJlbnRGb2xkZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGUucGF0aH0gLSBza2lwcGVkIChubyBwYXJlbnQgZm9sZGVyKWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBwYXJlbnROb3RlOiBURmlsZSB8IG51bGwgPSBudWxsO1xyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIGZvbGRlciBub3RlIChuYW1lIG1hdGNoZXMgcGFyZW50IGZvbGRlciBleGFjdGx5KVxyXG4gICAgICBjb25zdCBpc0ZvbGRlck5vdGUgPSBmaWxlLmJhc2VuYW1lID09PSBwYXJlbnRGb2xkZXIubmFtZTtcclxuICAgICAgXHJcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBmb2xkZXIgbm90ZSBidXQgdGhlIGNhc2UgZG9lc24ndCBtYXRjaCwgc2tpcCBpdFxyXG4gICAgICBpZiAoZmlsZS5iYXNlbmFtZS50b0xvd2VyQ2FzZSgpID09PSBwYXJlbnRGb2xkZXIubmFtZS50b0xvd2VyQ2FzZSgpICYmICFpc0ZvbGRlck5vdGUpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAke2ZpbGUucGF0aH0gLSBza2lwcGVkIChmb2xkZXIgbm90ZSBuYW1lIGNhc2UgZG9lc24ndCBtYXRjaCBmb2xkZXIgbmFtZSlgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAoaXNGb2xkZXJOb3RlKSB7XHJcbiAgICAgICAgLy8gRm9yIGZvbGRlciBub3RlcywgbG9vayBmb3IgYSBub3RlIG1hdGNoaW5nIHRoZSBncmFuZHBhcmVudCBmb2xkZXJcclxuICAgICAgICBjb25zdCBncmFuZHBhcmVudEZvbGRlciA9IHBhcmVudEZvbGRlci5wYXJlbnQ7XHJcbiAgICAgICAgaWYgKGdyYW5kcGFyZW50Rm9sZGVyKSB7XHJcbiAgICAgICAgICAvLyBGaW5kIGEgbm90ZSB0aGF0IGV4YWN0bHkgbWF0Y2hlcyB0aGUgZ3JhbmRwYXJlbnQgZm9sZGVyIG5hbWVcclxuICAgICAgICAgIHBhcmVudE5vdGUgPSB0aGlzLmFwcC52YXVsdFxyXG4gICAgICAgICAgICAuZ2V0TWFya2Rvd25GaWxlcygpXHJcbiAgICAgICAgICAgIC5maW5kKChmKSA9PiBcclxuICAgICAgICAgICAgICBmLmJhc2VuYW1lID09PSBncmFuZHBhcmVudEZvbGRlci5uYW1lICYmIFxyXG4gICAgICAgICAgICAgIGYucGFyZW50Py5wYXRoID09PSBncmFuZHBhcmVudEZvbGRlci5wYXRoICYmXHJcbiAgICAgICAgICAgICAgZiAhPT0gZmlsZVxyXG4gICAgICAgICAgICApIHx8IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZvciByZWd1bGFyIG5vdGVzLCBsb29rIGZvciBhIG5vdGUgbWF0Y2hpbmcgdGhlIHBhcmVudCBmb2xkZXJcclxuICAgICAgICAvLyBGaW5kIGEgbm90ZSB0aGF0IGV4YWN0bHkgbWF0Y2hlcyB0aGUgcGFyZW50IGZvbGRlciBuYW1lXHJcbiAgICAgICAgcGFyZW50Tm90ZSA9IHRoaXMuYXBwLnZhdWx0XHJcbiAgICAgICAgICAuZ2V0TWFya2Rvd25GaWxlcygpXHJcbiAgICAgICAgICAuZmluZCgoZikgPT4gXHJcbiAgICAgICAgICAgIGYuYmFzZW5hbWUgPT09IHBhcmVudEZvbGRlci5uYW1lICYmIFxyXG4gICAgICAgICAgICBmLnBhcmVudD8ucGF0aCA9PT0gcGFyZW50Rm9sZGVyLnBhdGggJiZcclxuICAgICAgICAgICAgZiAhPT0gZmlsZVxyXG4gICAgICAgICAgKSB8fCBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXBhcmVudE5vdGUpIHtcclxuICAgICAgICBjb25zdCB0YXJnZXRGb2xkZXIgPSBpc0ZvbGRlck5vdGUgPyBwYXJlbnRGb2xkZXIucGFyZW50Py5uYW1lIDogcGFyZW50Rm9sZGVyLm5hbWU7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGV0YWlsZWRMb2dzKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJHtmaWxlLnBhdGh9IC0gc2tpcHBlZCAobm8gbWF0Y2hpbmcgcGFyZW50IG5vdGUgZm9yIGZvbGRlciAke3RhcmdldEZvbGRlcn0pYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGZyb250bWF0dGVyXHJcbiAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRQYXJlbnQgPSBjYWNoZT8uZnJvbnRtYXR0ZXI/LnBhcmVudDtcclxuXHJcbiAgICAgIC8vIE9ubHkgdXBkYXRlIGlmIHRoZSBwYXJlbnQgZmllbGQgZG9lc24ndCBleGlzdCBvciBpcyBkaWZmZXJlbnRcclxuICAgICAgY29uc3QgbmV3UGFyZW50ID0gXCJbW1wiICsgcGFyZW50Tm90ZS5uYW1lLnJlcGxhY2UoJy5tZCcsICcnKSArIFwiXV1cIjtcclxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQgIT09IG5ld1BhcmVudCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZnJvbnRtYXR0ZXIpID0+IHtcclxuICAgICAgICAgIGZyb250bWF0dGVyLnBhcmVudCA9IG5ld1BhcmVudDtcclxuICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtmaWxlLnBhdGh9IC0gZnJvbnRtYXR0ZXIgdXBkYXRlZCB3aXRoIHBhcmVudDogJHtuZXdQYXJlbnR9YCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgJHtmaWxlLnBhdGh9IC0gc2tpcHBlZCAocGFyZW50IGFscmVhZHkgc2V0IGNvcnJlY3RseSlgKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgJHtmaWxlLnBhdGh9IC0gZXJyb3IgdXBkYXRpbmcgcGFyZW50IGxpbms6YCwgZXJyb3IpO1xyXG4gICAgICBuZXcgTm90aWNlKGBFcnJvciB1cGRhdGluZyBwYXJlbnQgbGluayBmb3IgJHtmaWxlLnBhdGh9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbnVubG9hZCgpIHtcclxuICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xyXG4gICAgICBjb25zb2xlLmxvZyhcInVubG9hZGluZyBwbHVnaW5cIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBoYW5kbGVGb2xkZXJSZW5hbWUoZm9sZGVyOiBURm9sZGVyKSB7XHJcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpIHtcclxuICAgICAgY29uc29sZS5sb2coYEZvbGRlciByZW5hbWVkL21vZGlmaWVkOiAke2ZvbGRlci5wYXRofSwgdXBkYXRpbmcgYWxsIGZpbGVzIGluc2lkZWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBhbGwgbWFya2Rvd24gZmlsZXMgaW4gdGhpcyBmb2xkZXIgYW5kIHN1YmZvbGRlcnNcclxuICAgIGNvbnN0IGZpbGVzSW5Gb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKClcclxuICAgICAgICAuZmlsdGVyKGYgPT4ge1xyXG4gICAgICAgICAgLy8gRm9yIHJvb3QgZm9sZGVyLCBwcm9jZXNzIGFsbCBmaWxlc1xyXG4gICAgICAgICAgaWYgKGZvbGRlci5pc1Jvb3QoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIEZvciBvdGhlciBmb2xkZXJzLCBvbmx5IHByb2Nlc3MgZmlsZXMgaW4gdGhhdCBmb2xkZXJcclxuICAgICAgICAgIHJldHVybiBmLnBhdGguc3RhcnRzV2l0aChmb2xkZXIucGF0aCArICcvJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gVXBkYXRlIGVhY2ggZmlsZVxyXG4gICAgZm9yIChjb25zdCBjaGlsZEZpbGUgb2YgZmlsZXNJbkZvbGRlcikge1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGFyZW50TGluayhjaGlsZEZpbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFsc28gdXBkYXRlIHRoZSBmb2xkZXIgbm90ZSBpZiBpdCBleGlzdHMgKHNraXAgZm9yIHJvb3QgZm9sZGVyKVxyXG4gICAgaWYgKCFmb2xkZXIuaXNSb290KCkpIHtcclxuICAgICAgICBjb25zdCBmb2xkZXJOb3RlID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpXHJcbiAgICAgICAgICAgIC5maW5kKGYgPT4gZi5iYXNlbmFtZSA9PT0gZm9sZGVyLm5hbWUgJiYgXHJcbiAgICAgICAgICAgICAgICAgICAgICBmLnBhcmVudD8ucGF0aCA9PT0gZm9sZGVyLnBhdGgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChmb2xkZXJOb3RlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRldGFpbGVkTG9ncykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVwZGF0aW5nIGZvbGRlciBub3RlOiAke2ZvbGRlck5vdGUucGF0aH1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcmVudExpbmsoZm9sZGVyTm90ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgUGFyZW50TGlua1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICBwbHVnaW46IFBhcmVudExpbms7XHJcbiAgcHJpdmF0ZSBmb2xkZXJJbnB1dEVsOiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gIHByaXZhdGUgc3VnZ2VzdGlvbkNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBhbGxvd2VkUGF0aHNDb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBQYXJlbnRMaW5rKSB7XHJcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICB9XHJcblxyXG4gIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICBjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcclxuICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHt0ZXh0OiBcIlBhcmVudCBMaW5rIFNldHRpbmdzXCJ9KTtcclxuXHJcbiAgICAvLyBCYXNpYyBzZXR0aW5ncyAoZW5hYmxlZCBhbmQgbG9ncylcclxuICAgIHRoaXMuYWRkQmFzaWNTZXR0aW5ncyhjb250YWluZXJFbCk7XHJcbiAgICBcclxuICAgIC8vIEZvbGRlciByZWZyZXNoIHNldHRpbmdcclxuICAgIHRoaXMuYWRkRm9sZGVyUmVmcmVzaFNldHRpbmcoY29udGFpbmVyRWwpO1xyXG5cclxuICAgIC8vIEFsbG93ZWQgcGF0aHMgc2VjdGlvblxyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoM1wiLCB7dGV4dDogXCJBbGxvd2VkIFBhdGhzXCJ9KTtcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgIHRleHQ6IFwiU3BlY2lmeSBwYXRocyB3aGVyZSB0aGUgcGx1Z2luIHNob3VsZCB3b3JrLiBMZWF2ZSBlbXB0eSB0byBhbGxvdyBhbGwgcGF0aHMuXCIsXHJcbiAgICAgIGNsczogXCJzZXR0aW5nLWl0ZW0tZGVzY3JpcHRpb25cIlxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ29udGFpbmVyIGZvciBhbGxvd2VkIHBhdGhzXHJcbiAgICB0aGlzLmFsbG93ZWRQYXRoc0NvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogXCJwYXJlbnQtbGluay1hbGxvd2VkLXBhdGhzXCIgfSk7XHJcblxyXG4gICAgLy8gQWRkIGJ1dHRvbiBmb3IgbmV3IHBhdGhcclxuICAgIGNvbnN0IGFkZEJ1dHRvbiA9IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cclxuICAgICAgICAuc2V0QnV0dG9uVGV4dChcIkFkZCBQYXRoXCIpXHJcbiAgICAgICAgLnNldENsYXNzKFwibW9kLXNldHRpbmctYnV0dG9uXCIpXHJcbiAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5hZGRBbGxvd2VkUGF0aElucHV0KCk7XHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgIC8vIEFkZCBleGlzdGluZyBwYXRoc1xyXG4gICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmFsbG93ZWRQYXRocy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5hZGRBbGxvd2VkUGF0aElucHV0KCk7IC8vIEFkZCBvbmUgZW1wdHkgaW5wdXQgYnkgZGVmYXVsdFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYWxsb3dlZFBhdGhzLmZvckVhY2gocGF0aCA9PiB7XHJcbiAgICAgICAgdGhpcy5hZGRBbGxvd2VkUGF0aElucHV0KHBhdGgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgc3R5bGVzXHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcInN0eWxlXCIsIHtcclxuICAgICAgdGV4dDogYFxyXG4gICAgICAgIC5wYXJlbnQtbGluay1pbnB1dC1jb250YWluZXIge1xyXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgZmxleDogMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnBhcmVudC1saW5rLWlucHV0LWNvbnRhaW5lciBpbnB1dCB7XHJcbiAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgIHBhZGRpbmc6IDZweCAxMnB4O1xyXG4gICAgICAgICAgaGVpZ2h0OiB2YXIoLS1pbnB1dC1oZWlnaHQpO1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1mb3JtLWZpZWxkKTtcclxuICAgICAgICAgIGJvcmRlcjogdmFyKC0taW5wdXQtYm9yZGVyLXdpZHRoKSBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XHJcbiAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xyXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzLXMpO1xyXG4gICAgICAgICAgZm9udC1zaXplOiB2YXIoLS1mb250LXVpLXNtYWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnBhcmVudC1saW5rLXN1Z2dlc3Rpb24tY29udGFpbmVyIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgbWF4LWhlaWdodDogMjAwcHg7XHJcbiAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcclxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcclxuICAgICAgICAgIHotaW5kZXg6IDEwMDtcclxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLXJhZGl1cy1zKTtcclxuICAgICAgICAgIGJveC1zaGFkb3c6IHZhcigtLXNoYWRvdy1zKTtcclxuICAgICAgICAgIG1hcmdpbi10b3A6IDRweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnBhcmVudC1saW5rLXN1Z2dlc3Rpb24ge1xyXG4gICAgICAgICAgcGFkZGluZzogOHB4IDEycHg7XHJcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgICBmb250LXNpemU6IHZhcigtLWZvbnQtdWktc21hbGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAucGFyZW50LWxpbmstc3VnZ2VzdGlvbjpob3ZlcixcclxuICAgICAgICAucGFyZW50LWxpbmstc3VnZ2VzdGlvbi5pcy1zZWxlY3RlZCB7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTtcclxuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWFjY2VudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5wYXJlbnQtbGluay1hbGxvd2VkLXBhdGgge1xyXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICBnYXA6IDhweDtcclxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgcGFkZGluZzogMCAyMHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAucGFyZW50LWxpbmstcmVtb3ZlLWJ1dHRvbiB7XHJcbiAgICAgICAgICBwYWRkaW5nOiAwO1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1lcnJvcik7XHJcbiAgICAgICAgICBib3JkZXI6IG5vbmU7XHJcbiAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1vbi1hY2NlbnQpO1xyXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzLXMpO1xyXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgaGVpZ2h0OiB2YXIoLS1pbnB1dC1oZWlnaHQpO1xyXG4gICAgICAgICAgd2lkdGg6IHZhcigtLWlucHV0LWhlaWdodCk7XHJcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAucGFyZW50LWxpbmstcmVtb3ZlLWJ1dHRvbjpob3ZlciB7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWVycm9yLWhvdmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnBhcmVudC1saW5rLWFsbG93ZWQtcGF0aHMge1xyXG4gICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAuc2V0dGluZy1pdGVtLm1vZC1zZXR0aW5nLWJ1dHRvbiB7XHJcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XHJcbiAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgYFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFkZEJhc2ljU2V0dGluZ3MoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJFbmFibGUgYXV0b21hdGljIHBhcmVudCBsaW5raW5nXCIpXHJcbiAgICAgIC5zZXREZXNjKFwiQXV0b21hdGljYWxseSBhZGQgcGFyZW50IGxpbmtzIHRvIGZpbGVzIHdoZW4gdGhleSBhcmUgY3JlYXRlZCBvciBtb3ZlZFwiKVxyXG4gICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlZClcclxuICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKFwiRW5hYmxlIGRldGFpbGVkIGxvZ3NcIilcclxuICAgICAgLnNldERlc2MoXCJTaG93IGFkZGl0aW9uYWwgcHJvY2Vzc2luZyBkZXRhaWxzIGluIHRoZSBjb25zb2xlXCIpXHJcbiAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxyXG4gICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZXRhaWxlZExvZ3MpXHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGV0YWlsZWRMb2dzID0gdmFsdWU7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICB9KSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFkZEFsbG93ZWRQYXRoSW5wdXQoaW5pdGlhbFZhbHVlOiBzdHJpbmcgPSBcIlwiKSB7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmFsbG93ZWRQYXRoc0NvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6IFwicGFyZW50LWxpbmstYWxsb3dlZC1wYXRoXCIgfSk7XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZSBpbnB1dCB3aXRoIGF1dG9jb21wbGV0ZVxyXG4gICAgY29uc3QgaW5wdXRDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiBcInBhcmVudC1saW5rLWlucHV0LWNvbnRhaW5lclwiIH0pO1xyXG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dENvbnRhaW5lci5jcmVhdGVFbChcImlucHV0XCIsIHtcclxuICAgICAgdHlwZTogXCJ0ZXh0XCIsXHJcbiAgICAgIHZhbHVlOiBpbml0aWFsVmFsdWUsXHJcbiAgICAgIHBsYWNlaG9sZGVyOiBcIlR5cGUgZm9sZGVyIHBhdGguLi5cIlxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZSBzdWdnZXN0aW9ucyBjb250YWluZXJcclxuICAgIGNvbnN0IHN1Z2dlc3Rpb25Db250YWluZXIgPSBpbnB1dENvbnRhaW5lci5jcmVhdGVEaXYoeyBcclxuICAgICAgY2xzOiBcInBhcmVudC1saW5rLXN1Z2dlc3Rpb24tY29udGFpbmVyXCIgXHJcbiAgICB9KTtcclxuICAgIHN1Z2dlc3Rpb25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cclxuICAgIC8vIEFkZCByZW1vdmUgYnV0dG9uXHJcbiAgICBjb25zdCByZW1vdmVCdXR0b24gPSBjb250YWluZXIuY3JlYXRlRWwoXCJidXR0b25cIiwge1xyXG4gICAgICB0ZXh0OiBcIlx1MDBEN1wiLFxyXG4gICAgICB0aXRsZTogXCJSZW1vdmUgcGF0aFwiLFxyXG4gICAgICBjbHM6IFwicGFyZW50LWxpbmstcmVtb3ZlLWJ1dHRvblwiXHJcbiAgICB9KTtcclxuICAgIHJlbW92ZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICBjb250YWluZXIucmVtb3ZlKCk7XHJcbiAgICAgIHRoaXMuc2F2ZUFsbG93ZWRQYXRocygpO1xyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgc2VsZWN0ZWRJbmRleCA9IC0xO1xyXG4gICAgY29uc3QgaGFuZGxlS2V5ZG93biA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25Db250YWluZXIuY2hpbGRyZW47XHJcbiAgICAgIGlmIChzdWdnZXN0aW9ucy5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgIGlmIChldmVudC5rZXkgPT09IFwiQXJyb3dEb3duXCIgfHwgZXZlbnQua2V5ID09PSBcIkFycm93VXBcIikge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVXBkYXRlIHNlbGVjdGVkIGluZGV4XHJcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCJBcnJvd0Rvd25cIikge1xyXG4gICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IChzZWxlY3RlZEluZGV4ICsgMSkgJSBzdWdnZXN0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlbGVjdGVkSW5kZXggPSBzZWxlY3RlZEluZGV4IDw9IDAgPyBzdWdnZXN0aW9ucy5sZW5ndGggLSAxIDogc2VsZWN0ZWRJbmRleCAtIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdmlzdWFsIHNlbGVjdGlvblxyXG4gICAgICAgIEFycmF5LmZyb20oc3VnZ2VzdGlvbnMpLmZvckVhY2goKGVsLCBpKSA9PiB7XHJcbiAgICAgICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKFwiaXMtc2VsZWN0ZWRcIiwgaSA9PT0gc2VsZWN0ZWRJbmRleCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIkVudGVyXCIgJiYgc2VsZWN0ZWRJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZFN1Z2dlc3Rpb24gPSBzdWdnZXN0aW9uc1tzZWxlY3RlZEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBpbnB1dC52YWx1ZSA9IHNlbGVjdGVkU3VnZ2VzdGlvbi50ZXh0Q29udGVudCB8fCBcIlwiO1xyXG4gICAgICAgIHN1Z2dlc3Rpb25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSAtMTtcclxuICAgICAgICB0aGlzLnNhdmVBbGxvd2VkUGF0aHMoKTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgICBzdWdnZXN0aW9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBzZWxlY3RlZEluZGV4ID0gLTE7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gQWRkIGlucHV0IGhhbmRsZXIgZm9yIGF1dG9jb21wbGV0ZVxyXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgc2VsZWN0ZWRJbmRleCA9IC0xOyAgLy8gUmVzZXQgc2VsZWN0aW9uIG9uIG5ldyBpbnB1dFxyXG4gICAgICB0aGlzLnVwZGF0ZVBhdGhTdWdnZXN0aW9ucyhpbnB1dCwgc3VnZ2VzdGlvbkNvbnRhaW5lcik7XHJcbiAgICAgIHRoaXMuc2F2ZUFsbG93ZWRQYXRocygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsICgpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVQYXRoU3VnZ2VzdGlvbnMoaW5wdXQsIHN1Z2dlc3Rpb25Db250YWluZXIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xyXG4gICAgICAvLyBEZWxheSBoaWRpbmcgc3VnZ2VzdGlvbnMgdG8gYWxsb3cgZm9yIGNsaWNrc1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBzdWdnZXN0aW9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBzZWxlY3RlZEluZGV4ID0gLTE7XHJcbiAgICAgIH0sIDIwMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlkb3duKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlUGF0aFN1Z2dlc3Rpb25zKGlucHV0OiBIVE1MSW5wdXRFbGVtZW50LCBzdWdnZXN0aW9uQ29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IGlucHV0LnZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBmb2xkZXJzID0gdGhpcy5nZXRBbGxGb2xkZXJzKCk7XHJcbiAgICBjb25zdCBzdWdnZXN0aW9ucyA9IGZvbGRlcnMuZmlsdGVyKGYgPT4gXHJcbiAgICAgIGYucGF0aC50b0xvd2VyQ2FzZSgpLmNvbnRhaW5zKGlucHV0VmFsdWUpXHJcbiAgICApO1xyXG5cclxuICAgIHN1Z2dlc3Rpb25Db250YWluZXIuZW1wdHkoKTtcclxuICAgIFxyXG4gICAgaWYgKHN1Z2dlc3Rpb25zLmxlbmd0aCA+IDAgJiYgaW5wdXRWYWx1ZSkge1xyXG4gICAgICBzdWdnZXN0aW9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgIHN1Z2dlc3Rpb25zLmZvckVhY2goZm9sZGVyID0+IHtcclxuICAgICAgICBjb25zdCBzdWdnZXN0aW9uRWwgPSBzdWdnZXN0aW9uQ29udGFpbmVyLmNyZWF0ZURpdih7XHJcbiAgICAgICAgICBjbHM6IFwicGFyZW50LWxpbmstc3VnZ2VzdGlvblwiLFxyXG4gICAgICAgICAgdGV4dDogZm9sZGVyLnBhdGhcclxuICAgICAgICB9KTtcclxuICAgICAgICBzdWdnZXN0aW9uRWwub25tb3VzZWRvd24gPSAoKSA9PiB7XHJcbiAgICAgICAgICBpbnB1dC52YWx1ZSA9IGZvbGRlci5wYXRoO1xyXG4gICAgICAgICAgc3VnZ2VzdGlvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICB0aGlzLnNhdmVBbGxvd2VkUGF0aHMoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN1Z2dlc3Rpb25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzYXZlQWxsb3dlZFBhdGhzKCkge1xyXG4gICAgY29uc3QgaW5wdXRzID0gdGhpcy5hbGxvd2VkUGF0aHNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcImlucHV0XCIpO1xyXG4gICAgY29uc3QgcGF0aHMgPSBBcnJheS5mcm9tKGlucHV0cylcclxuICAgICAgLm1hcChpbnB1dCA9PiBpbnB1dC52YWx1ZS50cmltKCkpXHJcbiAgICAgIC5maWx0ZXIocGF0aCA9PiBwYXRoLmxlbmd0aCA+IDApO1xyXG4gICAgXHJcbiAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hbGxvd2VkUGF0aHMgPSBwYXRocztcclxuICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRBbGxGb2xkZXJzKCk6IFRGb2xkZXJbXSB7XHJcbiAgICBjb25zdCBmb2xkZXJzOiBURm9sZGVyW10gPSBbXTtcclxuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0QWxsTG9hZGVkRmlsZXMoKTtcclxuICAgIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZvbGRlcikge1xyXG4gICAgICAgIGZvbGRlcnMucHVzaChmaWxlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZm9sZGVycztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkRm9sZGVyUmVmcmVzaFNldHRpbmcoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBjb25zdCBmb2xkZXJTZXR0aW5nID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKFwiUmVmcmVzaCBmb2xkZXIgcGFyZW50c1wiKVxyXG4gICAgICAuc2V0RGVzYyhcIlR5cGUgZm9sZGVyIHBhdGggdG8gcmVmcmVzaCBwYXJlbnQgbGlua3MgZm9yIGFsbCBmaWxlcyBpbiB0aGF0IGZvbGRlclwiKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgY29udGFpbmVyIGZvciB0aGUgaW5wdXQgYW5kIHN1Z2dlc3Rpb25zXHJcbiAgICBjb25zdCBpbnB1dENvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogXCJwYXJlbnQtbGluay1pbnB1dC1jb250YWluZXJcIiB9KTtcclxuICAgIHRoaXMuZm9sZGVySW5wdXRFbCA9IGlucHV0Q29udGFpbmVyLmNyZWF0ZUVsKFwiaW5wdXRcIiwge1xyXG4gICAgICB0eXBlOiBcInRleHRcIixcclxuICAgICAgdmFsdWU6IHRoaXMucGx1Z2luLnNldHRpbmdzLmxhc3RSZWZyZXNoZWRGb2xkZXIgfHwgXCJcIixcclxuICAgICAgcGxhY2Vob2xkZXI6IFwiVHlwZSBmb2xkZXIgcGF0aC4uLlwiXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDcmVhdGUgc3VnZ2VzdGlvbnMgY29udGFpbmVyXHJcbiAgICB0aGlzLnN1Z2dlc3Rpb25Db250YWluZXIgPSBpbnB1dENvbnRhaW5lci5jcmVhdGVEaXYoeyBcclxuICAgICAgY2xzOiBcInBhcmVudC1saW5rLXN1Z2dlc3Rpb24tY29udGFpbmVyXCIgXHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3VnZ2VzdGlvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgLy8gQWRkIHJlZnJlc2ggYnV0dG9uXHJcbiAgICBmb2xkZXJTZXR0aW5nLmFkZEJ1dHRvbihidXR0b24gPT4gYnV0dG9uXHJcbiAgICAgIC5zZXRCdXR0b25UZXh0KFwiUmVmcmVzaFwiKVxyXG4gICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZm9sZGVyUGF0aCA9IHRoaXMuZm9sZGVySW5wdXRFbC52YWx1ZTtcclxuICAgICAgICAvLyBIYW5kbGUgcm9vdCBwYXRoIHNwZWNpYWxseVxyXG4gICAgICAgIGlmIChmb2xkZXJQYXRoID09PSBcIi9cIiB8fCBmb2xkZXJQYXRoID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAvLyBHZXQgdGhlIHJvb3QgZm9sZGVyXHJcbiAgICAgICAgICBjb25zdCByb290Rm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0Um9vdCgpO1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFzdFJlZnJlc2hlZEZvbGRlciA9IFwiL1wiO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5oYW5kbGVGb2xkZXJSZW5hbWUocm9vdEZvbGRlcik7XHJcbiAgICAgICAgICBuZXcgTm90aWNlKGBVcGRhdGVkIHBhcmVudCBsaW5rcyBpbiB0aGUgZW50aXJlIHZhdWx0YCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IGZvbGRlciA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmb2xkZXJQYXRoKTtcclxuICAgICAgICAgIGlmIChmb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmxhc3RSZWZyZXNoZWRGb2xkZXIgPSBmb2xkZXJQYXRoO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uaGFuZGxlRm9sZGVyUmVuYW1lKGZvbGRlcik7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFVwZGF0ZWQgcGFyZW50IGxpbmtzIGluICR7Zm9sZGVyUGF0aH1gKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBmb2xkZXIgcGF0aFwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pKTtcclxuXHJcbiAgICAvLyBBZGQgaW5wdXQgaGFuZGxlciBmb3IgYXV0b2NvbXBsZXRlXHJcbiAgICB0aGlzLmZvbGRlcklucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVQYXRoU3VnZ2VzdGlvbnModGhpcy5mb2xkZXJJbnB1dEVsLCB0aGlzLnN1Z2dlc3Rpb25Db250YWluZXIpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmZvbGRlcklucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsICgpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVQYXRoU3VnZ2VzdGlvbnModGhpcy5mb2xkZXJJbnB1dEVsLCB0aGlzLnN1Z2dlc3Rpb25Db250YWluZXIpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmZvbGRlcklucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xyXG4gICAgICAvLyBEZWxheSBoaWRpbmcgc3VnZ2VzdGlvbnMgdG8gYWxsb3cgZm9yIGNsaWNrc1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLnN1Z2dlc3Rpb25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICB9LCAyMDApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBV087QUFTUCxJQUFNLG1CQUF1QztBQUFBLEVBQzNDLFNBQVM7QUFBQSxFQUNULGNBQWM7QUFBQSxFQUNkLGNBQWMsQ0FBQztBQUFBO0FBQ2pCO0FBRUEsSUFBcUIsYUFBckIsY0FBd0MsdUJBQU87QUFBQSxFQUc3QyxNQUFNLFNBQVM7QUFDYixVQUFNLEtBQUssYUFBYTtBQUd4QixTQUFLLGVBQWU7QUFHcEIsU0FBSyxjQUFjLElBQUkscUJBQXFCLEtBQUssS0FBSyxJQUFJLENBQUM7QUFBQSxFQUM3RDtBQUFBLEVBRVEsaUJBQWlCO0FBRXZCLFNBQUs7QUFBQSxNQUNILEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxPQUFPLFNBQVM7QUFDMUMsWUFBSSxnQkFBZ0IseUJBQVMsS0FBSyxTQUFTLFNBQVM7QUFDbEQsZ0JBQU0sS0FBSyxpQkFBaUIsSUFBSTtBQUFBLFFBQ2xDO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUdBLFNBQUs7QUFBQSxNQUNILEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxPQUFPLE1BQU0sWUFBWTtBQW5EM0Q7QUFvRFEsWUFBSSxDQUFDLEtBQUssU0FBUztBQUFTO0FBRTVCLFlBQUksZ0JBQWdCLHVCQUFPO0FBRXpCLGdCQUFNLEtBQUssaUJBQWlCLElBQUk7QUFHaEMsZ0JBQU0sZUFBZSxLQUFLLGVBQWEsVUFBSyxXQUFMLG1CQUFhO0FBQ3BELGNBQUksY0FBYztBQUNoQixnQkFBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixzQkFBUSxJQUFJLGlEQUFnRCxVQUFLLFdBQUwsbUJBQWEsTUFBTTtBQUFBLFlBQ2pGO0FBR0Esa0JBQU0sYUFBYSxLQUFLLElBQUksTUFBTSxpQkFBaUIsRUFDaEQsT0FBTyxPQUFFO0FBbkV4QixrQkFBQUEsS0FBQUM7QUFtRTJCLHVCQUFBRCxNQUFBLEVBQUUsV0FBRixnQkFBQUEsSUFBVSxZQUFTQyxNQUFBLEtBQUssV0FBTCxnQkFBQUEsSUFBYSxTQUFRLE1BQU07QUFBQSxhQUFJO0FBR2pFLHVCQUFXLGFBQWEsWUFBWTtBQUNsQyxrQkFBSSxLQUFLLFNBQVMsY0FBYztBQUM5Qix3QkFBUSxJQUFJLHdCQUF3QixVQUFVLE1BQU07QUFBQSxjQUN0RDtBQUNBLG9CQUFNLEtBQUssaUJBQWlCLFNBQVM7QUFBQSxZQUN2QztBQUFBLFVBQ0Y7QUFBQSxRQUNGLFdBQVcsZ0JBQWdCLHlCQUFTO0FBQ2xDLGdCQUFNLEtBQUssbUJBQW1CLElBQUk7QUFBQSxRQUNwQztBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0g7QUFHQSxTQUFLO0FBQUEsTUFDSCxLQUFLLElBQUksTUFBTSxHQUFHLFVBQVUsT0FBTyxTQUFTO0FBckZsRDtBQXNGUSxZQUFJLENBQUMsS0FBSyxTQUFTLFdBQVcsRUFBRSxnQkFBZ0I7QUFBUTtBQUd4RCxjQUFNLFFBQVEsS0FBSyxJQUFJLGNBQWMsYUFBYSxJQUFJO0FBQ3RELGNBQU0sY0FBYywrQkFBTztBQUkzQixjQUFNLGVBQWUsS0FBSyxlQUFhLFVBQUssV0FBTCxtQkFBYTtBQUNwRCxZQUFJLGlCQUFpQixFQUFDLDJDQUFhLFdBQVUsWUFBWSxXQUFXLE9BQU8sS0FBSyxRQUFRO0FBRXRGLGNBQUksS0FBSyxTQUFTLGNBQWM7QUFDOUIsb0JBQVEsSUFBSSxvQ0FBb0MsS0FBSyx5QkFBeUI7QUFBQSxVQUNoRjtBQUNBLGdCQUFNLEtBQUssbUJBQW1CLEtBQUssTUFBTTtBQUFBLFFBQzNDO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0Y7QUFBQSxFQUVBLE1BQU0sa0JBQWtCO0FBQ3RCLFFBQUksS0FBSyxTQUFTLGNBQWM7QUFDOUIsY0FBUSxJQUFJLGtDQUFrQztBQUM5QyxZQUFNQyxTQUFRLEtBQUssSUFBSSxNQUFNLGlCQUFpQjtBQUM5QyxjQUFRLElBQUksU0FBU0EsT0FBTSx1QkFBdUI7QUFBQSxJQUNwRDtBQUVBLFVBQU0sUUFBUSxLQUFLLElBQUksTUFBTSxpQkFBaUI7QUFDOUMsZUFBVyxRQUFRLE9BQU87QUFDeEIsVUFBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixnQkFBUSxJQUFJLG9CQUFvQixLQUFLLE1BQU07QUFBQSxNQUM3QztBQUNBLFlBQU0sS0FBSyxpQkFBaUIsSUFBSTtBQUFBLElBQ2xDO0FBQ0EsUUFBSSx1QkFBTywyQ0FBMkM7QUFBQSxFQUN4RDtBQUFBLEVBRUEsTUFBTSxpQkFBaUIsTUFBYTtBQTNIdEM7QUE0SEksUUFBSTtBQUVGLFVBQUksS0FBSyxTQUFTLGFBQWEsU0FBUyxHQUFHO0FBQ3pDLGNBQU0sWUFBWSxLQUFLLFNBQVMsYUFBYTtBQUFBLFVBQUssaUJBQVk7QUEvSHRFLGdCQUFBRjtBQWdJVSx3QkFBSyxLQUFLLFdBQVcsV0FBVztBQUFBLGVBRS9CQSxNQUFBLEtBQUssV0FBTCxnQkFBQUEsSUFBYSxTQUFRLElBQUksV0FBVyxXQUFXO0FBQUE7QUFBQSxRQUNsRDtBQUVBLFlBQUksQ0FBQyxXQUFXO0FBQ2QsY0FBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixvQkFBUSxJQUFJLEdBQUcsS0FBSyx1Q0FBdUM7QUFBQSxVQUM3RDtBQUNBO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFHQSxZQUFNLGVBQWUsS0FBSztBQUMxQixVQUFJLENBQUMsY0FBYztBQUNqQixZQUFJLEtBQUssU0FBUyxjQUFjO0FBQzlCLGtCQUFRLElBQUksR0FBRyxLQUFLLG1DQUFtQztBQUFBLFFBQ3pEO0FBQ0E7QUFBQSxNQUNGO0FBRUEsVUFBSSxhQUEyQjtBQUcvQixZQUFNLGVBQWUsS0FBSyxhQUFhLGFBQWE7QUFHcEQsVUFBSSxLQUFLLFNBQVMsWUFBWSxNQUFNLGFBQWEsS0FBSyxZQUFZLEtBQUssQ0FBQyxjQUFjO0FBQ3BGLFlBQUksS0FBSyxTQUFTLGNBQWM7QUFDOUIsa0JBQVEsSUFBSSxHQUFHLEtBQUssa0VBQWtFO0FBQUEsUUFDeEY7QUFDQTtBQUFBLE1BQ0Y7QUFFQSxVQUFJLGNBQWM7QUFFaEIsY0FBTSxvQkFBb0IsYUFBYTtBQUN2QyxZQUFJLG1CQUFtQjtBQUVyQix1QkFBYSxLQUFLLElBQUksTUFDbkIsaUJBQWlCLEVBQ2pCO0FBQUEsWUFBSyxDQUFDLE1BQUc7QUExS3RCLGtCQUFBQTtBQTJLYyx1QkFBRSxhQUFhLGtCQUFrQixVQUNqQ0EsTUFBQSxFQUFFLFdBQUYsZ0JBQUFBLElBQVUsVUFBUyxrQkFBa0IsUUFDckMsTUFBTTtBQUFBO0FBQUEsVUFDUixLQUFLO0FBQUEsUUFDVDtBQUFBLE1BQ0YsT0FBTztBQUdMLHFCQUFhLEtBQUssSUFBSSxNQUNuQixpQkFBaUIsRUFDakI7QUFBQSxVQUFLLENBQUMsTUFBRztBQXJMcEIsZ0JBQUFBO0FBc0xZLHFCQUFFLGFBQWEsYUFBYSxVQUM1QkEsTUFBQSxFQUFFLFdBQUYsZ0JBQUFBLElBQVUsVUFBUyxhQUFhLFFBQ2hDLE1BQU07QUFBQTtBQUFBLFFBQ1IsS0FBSztBQUFBLE1BQ1Q7QUFFQSxVQUFJLENBQUMsWUFBWTtBQUNmLGNBQU0sZUFBZSxnQkFBZSxrQkFBYSxXQUFiLG1CQUFxQixPQUFPLGFBQWE7QUFDN0UsWUFBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixrQkFBUSxJQUFJLEdBQUcsS0FBSyxzREFBc0QsZUFBZTtBQUFBLFFBQzNGO0FBQ0E7QUFBQSxNQUNGO0FBR0EsWUFBTSxRQUFRLEtBQUssSUFBSSxjQUFjLGFBQWEsSUFBSTtBQUN0RCxZQUFNLGlCQUFnQixvQ0FBTyxnQkFBUCxtQkFBb0I7QUFHMUMsWUFBTSxZQUFZLE9BQU8sV0FBVyxLQUFLLFFBQVEsT0FBTyxFQUFFLElBQUk7QUFDOUQsVUFBSSxrQkFBa0IsV0FBVztBQUMvQixjQUFNLEtBQUssSUFBSSxZQUFZLG1CQUFtQixNQUFNLENBQUMsZ0JBQWdCO0FBQ25FLHNCQUFZLFNBQVM7QUFDckIsY0FBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixvQkFBUSxJQUFJLEdBQUcsS0FBSywyQ0FBMkMsV0FBVztBQUFBLFVBQzVFO0FBQUEsUUFDRixDQUFDO0FBQUEsTUFDSCxXQUFXLEtBQUssU0FBUyxjQUFjO0FBQ3JDLGdCQUFRLElBQUksR0FBRyxLQUFLLCtDQUErQztBQUFBLE1BQ3JFO0FBQUEsSUFDRixTQUFTLE9BQVA7QUFDQSxjQUFRLE1BQU0sR0FBRyxLQUFLLHNDQUFzQyxLQUFLO0FBQ2pFLFVBQUksdUJBQU8sa0NBQWtDLEtBQUssTUFBTTtBQUFBLElBQzFEO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUNULFFBQUksS0FBSyxTQUFTLGNBQWM7QUFDOUIsY0FBUSxJQUFJLGtCQUFrQjtBQUFBLElBQ2hDO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ25CLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDM0U7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNuQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNuQztBQUFBLEVBRUEsTUFBTSxtQkFBbUIsUUFBaUI7QUFDeEMsUUFBSSxLQUFLLFNBQVMsY0FBYztBQUM5QixjQUFRLElBQUksNEJBQTRCLE9BQU8saUNBQWlDO0FBQUEsSUFDbEY7QUFHQSxVQUFNLGdCQUFnQixLQUFLLElBQUksTUFBTSxpQkFBaUIsRUFDakQsT0FBTyxPQUFLO0FBRVgsVUFBSSxPQUFPLE9BQU8sR0FBRztBQUNuQixlQUFPO0FBQUEsTUFDVDtBQUVBLGFBQU8sRUFBRSxLQUFLLFdBQVcsT0FBTyxPQUFPLEdBQUc7QUFBQSxJQUM1QyxDQUFDO0FBR0wsZUFBVyxhQUFhLGVBQWU7QUFDbkMsWUFBTSxLQUFLLGlCQUFpQixTQUFTO0FBQUEsSUFDekM7QUFHQSxRQUFJLENBQUMsT0FBTyxPQUFPLEdBQUc7QUFDbEIsWUFBTSxhQUFhLEtBQUssSUFBSSxNQUFNLGlCQUFpQixFQUM5QyxLQUFLLE9BQUU7QUFoUXBCO0FBZ1F1QixpQkFBRSxhQUFhLE9BQU8sVUFDdkIsT0FBRSxXQUFGLG1CQUFVLFVBQVMsT0FBTztBQUFBLE9BQUk7QUFFNUMsVUFBSSxZQUFZO0FBQ1osWUFBSSxLQUFLLFNBQVMsY0FBYztBQUM1QixrQkFBUSxJQUFJLHlCQUF5QixXQUFXLE1BQU07QUFBQSxRQUMxRDtBQUNBLGNBQU0sS0FBSyxpQkFBaUIsVUFBVTtBQUFBLE1BQzFDO0FBQUEsSUFDSjtBQUFBLEVBQ0Y7QUFDRjtBQUVBLElBQU0sdUJBQU4sY0FBbUMsaUNBQWlCO0FBQUEsRUFNbEQsWUFBWSxLQUFVLFFBQW9CO0FBQ3hDLFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2hCO0FBQUEsRUFFQSxVQUFnQjtBQUNkLFVBQU0sRUFBQyxZQUFXLElBQUk7QUFDdEIsZ0JBQVksTUFBTTtBQUNsQixnQkFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNLHVCQUFzQixDQUFDO0FBR3pELFNBQUssaUJBQWlCLFdBQVc7QUFHakMsU0FBSyx3QkFBd0IsV0FBVztBQUd4QyxnQkFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNLGdCQUFlLENBQUM7QUFDbEQsZ0JBQVksU0FBUyxLQUFLO0FBQUEsTUFDeEIsTUFBTTtBQUFBLE1BQ04sS0FBSztBQUFBLElBQ1AsQ0FBQztBQUdELFNBQUssd0JBQXdCLFlBQVksVUFBVSxFQUFFLEtBQUssNEJBQTRCLENBQUM7QUFHdkYsVUFBTSxZQUFZLElBQUksd0JBQVEsV0FBVyxFQUN0QyxVQUFVLFlBQVUsT0FDbEIsY0FBYyxVQUFVLEVBQ3hCLFNBQVMsb0JBQW9CLEVBQzdCLFFBQVEsTUFBTTtBQUNiLFdBQUssb0JBQW9CO0FBQUEsSUFDM0IsQ0FBQyxDQUFDO0FBR04sUUFBSSxLQUFLLE9BQU8sU0FBUyxhQUFhLFdBQVcsR0FBRztBQUNsRCxXQUFLLG9CQUFvQjtBQUFBLElBQzNCLE9BQU87QUFDTCxXQUFLLE9BQU8sU0FBUyxhQUFhLFFBQVEsVUFBUTtBQUNoRCxhQUFLLG9CQUFvQixJQUFJO0FBQUEsTUFDL0IsQ0FBQztBQUFBLElBQ0g7QUFHQSxnQkFBWSxTQUFTLFNBQVM7QUFBQSxNQUM1QixNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQXVFUixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRVEsaUJBQWlCLGFBQTBCO0FBQ2pELFFBQUksd0JBQVEsV0FBVyxFQUNwQixRQUFRLGlDQUFpQyxFQUN6QyxRQUFRLHdFQUF3RSxFQUNoRixVQUFVLFlBQVUsT0FDbEIsU0FBUyxLQUFLLE9BQU8sU0FBUyxPQUFPLEVBQ3JDLFNBQVMsT0FBTyxVQUFVO0FBQ3pCLFdBQUssT0FBTyxTQUFTLFVBQVU7QUFDL0IsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2pDLENBQUMsQ0FBQztBQUVOLFFBQUksd0JBQVEsV0FBVyxFQUNwQixRQUFRLHNCQUFzQixFQUM5QixRQUFRLG1EQUFtRCxFQUMzRCxVQUFVLFlBQVUsT0FDbEIsU0FBUyxLQUFLLE9BQU8sU0FBUyxZQUFZLEVBQzFDLFNBQVMsT0FBTyxVQUFVO0FBQ3pCLFdBQUssT0FBTyxTQUFTLGVBQWU7QUFDcEMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2pDLENBQUMsQ0FBQztBQUFBLEVBQ1I7QUFBQSxFQUVRLG9CQUFvQixlQUF1QixJQUFJO0FBQ3JELFVBQU0sWUFBWSxLQUFLLHNCQUFzQixVQUFVLEVBQUUsS0FBSywyQkFBMkIsQ0FBQztBQUcxRixVQUFNLGlCQUFpQixVQUFVLFVBQVUsRUFBRSxLQUFLLDhCQUE4QixDQUFDO0FBQ2pGLFVBQU0sUUFBUSxlQUFlLFNBQVMsU0FBUztBQUFBLE1BQzdDLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLGFBQWE7QUFBQSxJQUNmLENBQUM7QUFHRCxVQUFNLHNCQUFzQixlQUFlLFVBQVU7QUFBQSxNQUNuRCxLQUFLO0FBQUEsSUFDUCxDQUFDO0FBQ0Qsd0JBQW9CLE1BQU0sVUFBVTtBQUdwQyxVQUFNLGVBQWUsVUFBVSxTQUFTLFVBQVU7QUFBQSxNQUNoRCxNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsTUFDUCxLQUFLO0FBQUEsSUFDUCxDQUFDO0FBQ0QsaUJBQWEsVUFBVSxNQUFNO0FBQzNCLGdCQUFVLE9BQU87QUFDakIsV0FBSyxpQkFBaUI7QUFBQSxJQUN4QjtBQUVBLFFBQUksZ0JBQWdCO0FBQ3BCLFVBQU0sZ0JBQWdCLENBQUMsVUFBeUI7QUFDOUMsWUFBTSxjQUFjLG9CQUFvQjtBQUN4QyxVQUFJLFlBQVksV0FBVztBQUFHO0FBRTlCLFVBQUksTUFBTSxRQUFRLGVBQWUsTUFBTSxRQUFRLFdBQVc7QUFDeEQsY0FBTSxlQUFlO0FBR3JCLFlBQUksTUFBTSxRQUFRLGFBQWE7QUFDN0IsMkJBQWlCLGdCQUFnQixLQUFLLFlBQVk7QUFBQSxRQUNwRCxPQUFPO0FBQ0wsMEJBQWdCLGlCQUFpQixJQUFJLFlBQVksU0FBUyxJQUFJLGdCQUFnQjtBQUFBLFFBQ2hGO0FBR0EsY0FBTSxLQUFLLFdBQVcsRUFBRSxRQUFRLENBQUMsSUFBSSxNQUFNO0FBQ3pDLGFBQUcsVUFBVSxPQUFPLGVBQWUsTUFBTSxhQUFhO0FBQUEsUUFDeEQsQ0FBQztBQUFBLE1BQ0gsV0FBVyxNQUFNLFFBQVEsV0FBVyxpQkFBaUIsR0FBRztBQUN0RCxjQUFNLGVBQWU7QUFDckIsY0FBTSxxQkFBcUIsWUFBWSxhQUFhO0FBQ3BELGNBQU0sUUFBUSxtQkFBbUIsZUFBZTtBQUNoRCw0QkFBb0IsTUFBTSxVQUFVO0FBQ3BDLHdCQUFnQjtBQUNoQixhQUFLLGlCQUFpQjtBQUFBLE1BQ3hCLFdBQVcsTUFBTSxRQUFRLFVBQVU7QUFDakMsNEJBQW9CLE1BQU0sVUFBVTtBQUNwQyx3QkFBZ0I7QUFBQSxNQUNsQjtBQUFBLElBQ0Y7QUFHQSxVQUFNLGlCQUFpQixTQUFTLE1BQU07QUFDcEMsc0JBQWdCO0FBQ2hCLFdBQUssc0JBQXNCLE9BQU8sbUJBQW1CO0FBQ3JELFdBQUssaUJBQWlCO0FBQUEsSUFDeEIsQ0FBQztBQUVELFVBQU0saUJBQWlCLFNBQVMsTUFBTTtBQUNwQyxXQUFLLHNCQUFzQixPQUFPLG1CQUFtQjtBQUFBLElBQ3ZELENBQUM7QUFFRCxVQUFNLGlCQUFpQixRQUFRLE1BQU07QUFFbkMsaUJBQVcsTUFBTTtBQUNmLDRCQUFvQixNQUFNLFVBQVU7QUFDcEMsd0JBQWdCO0FBQUEsTUFDbEIsR0FBRyxHQUFHO0FBQUEsSUFDUixDQUFDO0FBRUQsVUFBTSxpQkFBaUIsV0FBVyxhQUFhO0FBQUEsRUFDakQ7QUFBQSxFQUVRLHNCQUFzQixPQUF5QixxQkFBa0M7QUFDdkYsVUFBTSxhQUFhLE1BQU0sTUFBTSxZQUFZO0FBQzNDLFVBQU0sVUFBVSxLQUFLLGNBQWM7QUFDbkMsVUFBTSxjQUFjLFFBQVE7QUFBQSxNQUFPLE9BQ2pDLEVBQUUsS0FBSyxZQUFZLEVBQUUsU0FBUyxVQUFVO0FBQUEsSUFDMUM7QUFFQSx3QkFBb0IsTUFBTTtBQUUxQixRQUFJLFlBQVksU0FBUyxLQUFLLFlBQVk7QUFDeEMsMEJBQW9CLE1BQU0sVUFBVTtBQUNwQyxrQkFBWSxRQUFRLFlBQVU7QUFDNUIsY0FBTSxlQUFlLG9CQUFvQixVQUFVO0FBQUEsVUFDakQsS0FBSztBQUFBLFVBQ0wsTUFBTSxPQUFPO0FBQUEsUUFDZixDQUFDO0FBQ0QscUJBQWEsY0FBYyxNQUFNO0FBQy9CLGdCQUFNLFFBQVEsT0FBTztBQUNyQiw4QkFBb0IsTUFBTSxVQUFVO0FBQ3BDLGVBQUssaUJBQWlCO0FBQUEsUUFDeEI7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNILE9BQU87QUFDTCwwQkFBb0IsTUFBTSxVQUFVO0FBQUEsSUFDdEM7QUFBQSxFQUNGO0FBQUEsRUFFUSxtQkFBbUI7QUFDekIsVUFBTSxTQUFTLEtBQUssc0JBQXNCLGlCQUFpQixPQUFPO0FBQ2xFLFVBQU0sUUFBUSxNQUFNLEtBQUssTUFBTSxFQUM1QixJQUFJLFdBQVMsTUFBTSxNQUFNLEtBQUssQ0FBQyxFQUMvQixPQUFPLFVBQVEsS0FBSyxTQUFTLENBQUM7QUFFakMsU0FBSyxPQUFPLFNBQVMsZUFBZTtBQUNwQyxTQUFLLE9BQU8sYUFBYTtBQUFBLEVBQzNCO0FBQUEsRUFFUSxnQkFBMkI7QUFDakMsVUFBTSxVQUFxQixDQUFDO0FBQzVCLFVBQU0sUUFBUSxLQUFLLElBQUksTUFBTSxrQkFBa0I7QUFDL0MsVUFBTSxRQUFRLFVBQVE7QUFDcEIsVUFBSSxnQkFBZ0IseUJBQVM7QUFDM0IsZ0JBQVEsS0FBSyxJQUFJO0FBQUEsTUFDbkI7QUFBQSxJQUNGLENBQUM7QUFDRCxXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRVEsd0JBQXdCLGFBQTBCO0FBQ3hELFVBQU0sZ0JBQWdCLElBQUksd0JBQVEsV0FBVyxFQUMxQyxRQUFRLHdCQUF3QixFQUNoQyxRQUFRLHVFQUF1RTtBQUdsRixVQUFNLGlCQUFpQixZQUFZLFVBQVUsRUFBRSxLQUFLLDhCQUE4QixDQUFDO0FBQ25GLFNBQUssZ0JBQWdCLGVBQWUsU0FBUyxTQUFTO0FBQUEsTUFDcEQsTUFBTTtBQUFBLE1BQ04sT0FBTyxLQUFLLE9BQU8sU0FBUyx1QkFBdUI7QUFBQSxNQUNuRCxhQUFhO0FBQUEsSUFDZixDQUFDO0FBR0QsU0FBSyxzQkFBc0IsZUFBZSxVQUFVO0FBQUEsTUFDbEQsS0FBSztBQUFBLElBQ1AsQ0FBQztBQUNELFNBQUssb0JBQW9CLE1BQU0sVUFBVTtBQUd6QyxrQkFBYyxVQUFVLFlBQVUsT0FDL0IsY0FBYyxTQUFTLEVBQ3ZCLFFBQVEsWUFBWTtBQUNuQixZQUFNLGFBQWEsS0FBSyxjQUFjO0FBRXRDLFVBQUksZUFBZSxPQUFPLGVBQWUsSUFBSTtBQUUzQyxjQUFNLGFBQWEsS0FBSyxJQUFJLE1BQU0sUUFBUTtBQUMxQyxhQUFLLE9BQU8sU0FBUyxzQkFBc0I7QUFDM0MsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUMvQixjQUFNLEtBQUssT0FBTyxtQkFBbUIsVUFBVTtBQUMvQyxZQUFJLHVCQUFPLDBDQUEwQztBQUFBLE1BQ3ZELE9BQU87QUFDTCxjQUFNLFNBQVMsS0FBSyxJQUFJLE1BQU0sc0JBQXNCLFVBQVU7QUFDOUQsWUFBSSxrQkFBa0IseUJBQVM7QUFDN0IsZUFBSyxPQUFPLFNBQVMsc0JBQXNCO0FBQzNDLGdCQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLGdCQUFNLEtBQUssT0FBTyxtQkFBbUIsTUFBTTtBQUMzQyxjQUFJLHVCQUFPLDJCQUEyQixZQUFZO0FBQUEsUUFDcEQsT0FBTztBQUNMLGNBQUksdUJBQU8sa0NBQWtDO0FBQUEsUUFDL0M7QUFBQSxNQUNGO0FBQUEsSUFDRixDQUFDLENBQUM7QUFHSixTQUFLLGNBQWMsaUJBQWlCLFNBQVMsTUFBTTtBQUNqRCxXQUFLLHNCQUFzQixLQUFLLGVBQWUsS0FBSyxtQkFBbUI7QUFBQSxJQUN6RSxDQUFDO0FBQ0QsU0FBSyxjQUFjLGlCQUFpQixTQUFTLE1BQU07QUFDakQsV0FBSyxzQkFBc0IsS0FBSyxlQUFlLEtBQUssbUJBQW1CO0FBQUEsSUFDekUsQ0FBQztBQUNELFNBQUssY0FBYyxpQkFBaUIsUUFBUSxNQUFNO0FBRWhELGlCQUFXLE1BQU07QUFDZixhQUFLLG9CQUFvQixNQUFNLFVBQVU7QUFBQSxNQUMzQyxHQUFHLEdBQUc7QUFBQSxJQUNSLENBQUM7QUFBQSxFQUNIO0FBQ0Y7IiwKICAibmFtZXMiOiBbIl9hIiwgIl9iIiwgImZpbGVzIl0KfQo=
